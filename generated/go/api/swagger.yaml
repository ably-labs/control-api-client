openapi: 3.0.1
info:
  title: Control API v1
  description: "Use the Control API to manage your applications, namespaces, keys,\
    \ queues, rules, and more.\n\nDetailed information on using this API can be found\
    \ in the Ably <a href=\"https://ably.com/documentation/control-api\">Control API\
    \ documentation</a>.\n\nControl API is currently in Beta.\n"
  version: 1.0.18
servers:
- url: https://control.ably.net/v1
paths:
  /accounts/{account_id}/apps:
    get:
      tags:
      - apps
      summary: Lists account apps
      description: List all Ably applications for the specified account ID.
      parameters:
      - name: account_id
        in: path
        description: The account ID for which to retrieve the associated applications.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: List of apps for the specified account are returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/app_response'
                x-content-type: application/json
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
    post:
      tags:
      - apps
      summary: Creates an app
      description: Creates an application with the specified properties.
      parameters:
      - name: account_id
        in: path
        description: The account ID of the account in which to create the application.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app_post'
      responses:
        "201":
          description: App created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app_response'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
  /apps/{id}:
    delete:
      tags:
      - apps
      summary: Deletes an app
      description: Deletes the application with the specified application ID.
      parameters:
      - name: id
        in: path
        description: The ID of the application to be deleted.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: App deleted
          content: {}
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
    patch:
      tags:
      - apps
      summary: Updates an app
      description: Updates the application with the specified application ID.
      parameters:
      - name: id
        in: path
        description: The ID of application to be updated.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app_patch'
      responses:
        "200":
          description: App updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app_response'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Invalid resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
  /apps/{id}/pkcs12:
    post:
      tags:
      - apps
      summary: Updates app's APNs info from a `.p12` file
      description: Updates the application's Apple Push Notification service (APNs)
        information.
      parameters:
      - name: id
        in: path
        description: The application ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/app_pkcs12'
      responses:
        "200":
          description: App updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app_response'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
  /apps/{app_id}/keys:
    get:
      tags:
      - keys
      summary: Lists app keys
      description: Lists the API keys associated with the application ID.
      parameters:
      - name: app_id
        in: path
        description: The application ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Key list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/key_response'
                x-content-type: application/json
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "504":
          description: Gateway timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
    post:
      tags:
      - keys
      summary: Creates a key
      description: Creates an API key for the application specified.
      parameters:
      - name: app_id
        in: path
        description: The application ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/key_post'
      responses:
        "201":
          description: Key created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/key_response'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
  /apps/{app_id}/keys/{key_id}:
    patch:
      tags:
      - keys
      summary: Updates a key
      description: "Update the API key with the specified key ID, for the application\
        \ with the specified application ID."
      parameters:
      - name: app_id
        in: path
        description: The application ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: key_id
        in: path
        description: The API key ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/key_patch'
      responses:
        "200":
          description: Key updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/key_response'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "504":
          description: Gateway timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
  /apps/{app_id}/keys/{key_id}/revoke:
    post:
      tags:
      - keys
      summary: Revokes a key
      description: "Revokes the API key with the specified ID, with the Application\
        \ ID. This deletes the key."
      parameters:
      - name: app_id
        in: path
        description: The application ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: key_id
        in: path
        description: The key ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Key revoked
          content: {}
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "504":
          description: Gateway timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
  /apps/{app_id}/namespaces:
    get:
      tags:
      - namespaces
      summary: Lists namespaces
      description: List the <a href="https://ably.com/documentation/general/channel-rules-namespaces">namespaces</a>
        for the specified application ID.
      parameters:
      - name: app_id
        in: path
        description: The application ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Namespace list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/namespace_response'
                x-content-type: application/json
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "504":
          description: Gateway timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
    post:
      tags:
      - namespaces
      summary: Creates a namespace
      description: Creates a <a href="https://ably.com/documentation/general/channel-rules-namespaces">namespace</a>
        for the specified application ID.
      parameters:
      - name: app_id
        in: path
        description: The application ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/namespace_post'
      responses:
        "201":
          description: Namespace created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/namespace_response'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
  /apps/{app_id}/namespaces/{namespace_id}:
    delete:
      tags:
      - namespaces
      summary: Deletes a namespace
      description: "Deletes the <a href=\"https://ably.com/documentation/general/channel-rules-namespaces\"\
        >namespace</a> with the specified ID, for the specified application ID."
      parameters:
      - name: app_id
        in: path
        description: The application ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace_id
        in: path
        description: The namespace ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Namespace deleted
          content: {}
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "504":
          description: Gateway timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
    patch:
      tags:
      - namespaces
      summary: Updates a namespace
      description: "Updates the <a href=\"https://ably.com/documentation/general/channel-rules-namespaces\"\
        >namespace</a> with the specified ID, for the application with the specified\
        \ application ID."
      parameters:
      - name: app_id
        in: path
        description: The application ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: namespace_id
        in: path
        description: The namespace ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/namespace_patch'
      responses:
        "200":
          description: Namespace updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/namespace_response'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "504":
          description: Gateway timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
  /apps/{app_id}/queues:
    get:
      tags:
      - queues
      summary: Lists queues
      description: Lists the <a href="https://ably.com/documentation/general/queues">queues</a>
        associated with the specified application ID.
      parameters:
      - name: app_id
        in: path
        description: The application ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Queue list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/queue_response'
                x-content-type: application/json
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "503":
          description: 503 Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "504":
          description: Gateway timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
    post:
      tags:
      - queues
      summary: Creates a queue
      description: Creates a <a href="https://ably.com/documentation/general/queues">queue</a>
        for the application specified by application ID. The properties for the queue
        to be created are specified in the request body.
      parameters:
      - name: app_id
        in: path
        description: The application ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/queue'
      responses:
        "201":
          description: Queue created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/queue_response'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
  /apps/{app_id}/queues/{queue_id}:
    delete:
      tags:
      - queues
      summary: Deletes a queue
      description: "Delete the <a href=\"https://ably.com/documentation/general/queues\"\
        >queue</a> with the specified queue name, from the application with the specified\
        \ application ID."
      parameters:
      - name: app_id
        in: path
        description: The application ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: queue_id
        in: path
        description: The queue ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Queue deleted
          content: {}
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "503":
          description: 503 Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
  /apps/{app_id}/rules:
    get:
      tags:
      - rules
      summary: Lists Reactor rules
      description: Lists the <a href="https://ably.com/documentation/general/events">rules</a>
        for the application specified by the application ID.
      parameters:
      - name: app_id
        in: path
        description: The application ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Reactor rule list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/rule_response'
                x-content-type: application/json
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "504":
          description: Gateway timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
    post:
      tags:
      - rules
      summary: Creates a Reactor rule
      description: Creates a <a href="https://ably.com/documentation/general/events">rule</a>
        for the application with the specified application ID.
      parameters:
      - name: app_id
        in: path
        description: The application ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: The rule properties.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rule_post'
      responses:
        "201":
          description: Reactor rule created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rule_response'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "504":
          description: Gateway timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
  /apps/{app_id}/rules/{rule_id}:
    get:
      tags:
      - rules
      summary: Gets a reactor rule by rule ID
      description: "Returns the <a href=\"https://ably.com/documentation/general/events\"\
        >rule</a> specified by the rule ID, for the application specified by application\
        \ ID."
      parameters:
      - name: app_id
        in: path
        description: The application ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: rule_id
        in: path
        description: The rule ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Reactor rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rule_response'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "504":
          description: Gateway timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
    delete:
      tags:
      - rules
      summary: Deletes a Reactor rule
      description: "Deletes the <a href=\"https://ably.com/documentation/general/events\"\
        >rule</a> specified by the rule ID, for the application specified by application\
        \ ID."
      parameters:
      - name: app_id
        in: path
        description: The application ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: rule_id
        in: path
        description: The rule ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Reactor rule deleted
          content: {}
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "504":
          description: Gateway timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
    patch:
      tags:
      - rules
      summary: Updates a Reactor rule
      description: "Updates the <a href=\"https://ably.com/documentation/general/events\"\
        >rule</a> specified by the rule ID, for the application specified by application\
        \ ID."
      parameters:
      - name: app_id
        in: path
        description: The application ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: rule_id
        in: path
        description: The rule ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Properties for the rule.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rule_patch'
      responses:
        "200":
          description: Reactor rule updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rule_response'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "404":
          description: App not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "422":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "504":
          description: Gateway timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
  /me:
    get:
      tags:
      - tokens
      summary: Get token details
      description: Retrieve information about the <a href="https://ably.com/documentation/control-api#authentication">token</a>
        the current user authenticates with.
      responses:
        "200":
          description: Token details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/me'
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - bearer_auth: []
components:
  schemas:
    rule_source:
      required:
      - channelFilter
      - type
      type: object
      properties:
        channelFilter:
          type: string
          description: This field allows you to filter your rule based on a regular
            expression that is matched against the complete channel name. Leave this
            empty if you want the rule to apply to all channels.
          example: ^my-channel.*
        type:
          type: string
          description: "The type `channel.message` delivers all messages published\
            \ on a channel. The type `channel.presence` delivers all enter, update\
            \ and leave events for members present on a channel. The type `channel.lifecycle`\
            \ events for this rule type are currently not supported. Get in touch\
            \ (https://ably.com/contact) if you need this feature. The type `channel.occupancy`\
            \ delivers all occupancy events for the channel."
          example: channel.message
      additionalProperties: false
    rule_source_patch:
      type: object
      properties:
        channelFilter:
          type: string
          description: This field allows you to filter your rule based on a regular
            expression that is matched against the complete channel name. Leave this
            empty if you want the rule to apply to all channels.
          example: ^my-channel.*
        type:
          type: string
          description: "The type `channel.message` delivers all messages published\
            \ on a channel. The type `channel.presence` delivers all enter, update\
            \ and leave events for members present on a channel. The type `channel.lifecycle`\
            \ events for this rule type are currently not supported. Get in touch\
            \ (https://ably.com/contact) if you need this feature. The type `channel.occupancy`\
            \ delivers all occupancy events for the channel."
          example: channel.message
      additionalProperties: false
    rule_attributes:
      type: object
      properties:
        id:
          type: string
          description: The rule ID.
          example: 83IzAB
        appId:
          type: string
          description: The Ably application ID.
          example: 28GY6a
        version:
          type: string
          description: API version. Events and the format of their payloads are versioned.
            Please see the <a href="https://ably.com/documentation/general/events">Events
            documentation</a>.
          example: "1.2"
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        created:
          type: number
          description: Unix timestamp representing the date and time of creation of
            the rule.
          example: 1602844091815
        modified:
          type: number
          description: Unix timestamp representing the date and time of last modification
            of the rule.
          example: 1614679682091
      additionalProperties: false
    rule_post:
      discriminator:
        propertyName: RuleType
        mapping:
          http: '#/components/schemas/http_rule_post'
          http/ifttt: '#/components/schemas/ifttt_rule_post'
          http/zapier: '#/components/schemas/zapier_rule_post'
          http/cloudflare-worker: '#/components/schemas/cloudflare_worker_rule_post'
          http/azure-function: '#/components/schemas/azure_function_rule_post'
          http/google-cloud-function: '#/components/schemas/google_cloud_function_rule_post'
          aws/lambda: '#/components/schemas/aws_lambda_rule_post'
          aws/kinesis: '#/components/schemas/aws_kinesis_rule_post'
          aws/sqs: '#/components/schemas/aws_sqs_rule_post'
          amqp: '#/components/schemas/amqp_rule_post'
          amqp/external: '#/components/schemas/amqp_external_rule_post'
      oneOf:
      - $ref: '#/components/schemas/http_rule_post'
      - $ref: '#/components/schemas/ifttt_rule_post'
      - $ref: '#/components/schemas/zapier_rule_post'
      - $ref: '#/components/schemas/cloudflare_worker_rule_post'
      - $ref: '#/components/schemas/azure_function_rule_post'
      - $ref: '#/components/schemas/google_cloud_function_rule_post'
      - $ref: '#/components/schemas/aws_lambda_rule_post'
      - $ref: '#/components/schemas/aws_kinesis_rule_post'
      - $ref: '#/components/schemas/aws_sqs_rule_post'
      - $ref: '#/components/schemas/amqp_rule_post'
      - $ref: '#/components/schemas/amqp_external_rule_post'
    rule_patch:
      discriminator:
        propertyName: RuleType
        mapping:
          http: '#/components/schemas/http_rule_patch'
          http/ifttt: '#/components/schemas/ifttt_rule_patch'
          http/zapier: '#/components/schemas/zapier_rule_patch'
          http/cloudflare-worker: '#/components/schemas/cloudflare_worker_rule_patch'
          http/azure-function: '#/components/schemas/azure_function_rule_patch'
          http/google-cloud-function: '#/components/schemas/google_cloud_function_rule_patch'
          aws/lambda: '#/components/schemas/aws_lambda_rule_patch'
          aws/kinesis: '#/components/schemas/aws_kinesis_rule_patch'
          aws/sqs: '#/components/schemas/aws_sqs_rule_patch'
          amqp: '#/components/schemas/amqp_rule_patch'
          amqp/external: '#/components/schemas/amqp_external_rule_patch'
      oneOf:
      - $ref: '#/components/schemas/http_rule_patch'
      - $ref: '#/components/schemas/ifttt_rule_patch'
      - $ref: '#/components/schemas/zapier_rule_patch'
      - $ref: '#/components/schemas/cloudflare_worker_rule_patch'
      - $ref: '#/components/schemas/azure_function_rule_patch'
      - $ref: '#/components/schemas/google_cloud_function_rule_patch'
      - $ref: '#/components/schemas/aws_lambda_rule_patch'
      - $ref: '#/components/schemas/aws_kinesis_rule_patch'
      - $ref: '#/components/schemas/aws_sqs_rule_patch'
      - $ref: '#/components/schemas/amqp_rule_patch'
      - $ref: '#/components/schemas/amqp_external_rule_patch'
    rule_response:
      discriminator:
        propertyName: RuleType
        mapping:
          http: '#/components/schemas/http_rule_response'
          http/ifttt: '#/components/schemas/ifttt_rule_response'
          http/zapier: '#/components/schemas/zapier_rule_response'
          http/cloudflare-worker: '#/components/schemas/cloudflare_worker_rule_response'
          http/azure-function: '#/components/schemas/azure_function_rule_response'
          http/google-cloud-function: '#/components/schemas/google_cloud_function_rule_response'
          aws/lambda: '#/components/schemas/aws_lambda_rule_response'
          aws/kinesis: '#/components/schemas/aws_kinesis_rule_response'
          aws/sqs: '#/components/schemas/aws_sqs_rule_response'
          amqp: '#/components/schemas/amqp_rule_response'
          amqp/external: '#/components/schemas/amqp_external_rule_response'
          unsupported: '#/components/schemas/unsupported_rule_response'
      oneOf:
      - $ref: '#/components/schemas/http_rule_response'
      - $ref: '#/components/schemas/ifttt_rule_response'
      - $ref: '#/components/schemas/zapier_rule_response'
      - $ref: '#/components/schemas/cloudflare_worker_rule_response'
      - $ref: '#/components/schemas/azure_function_rule_response'
      - $ref: '#/components/schemas/google_cloud_function_rule_response'
      - $ref: '#/components/schemas/aws_lambda_rule_response'
      - $ref: '#/components/schemas/aws_kinesis_rule_response'
      - $ref: '#/components/schemas/aws_sqs_rule_response'
      - $ref: '#/components/schemas/amqp_rule_response'
      - $ref: '#/components/schemas/amqp_external_rule_response'
      - $ref: '#/components/schemas/unsupported_rule_response'
    http_rule_post:
      required:
      - requestMode
      - ruleType
      - source
      - target
      type: object
      properties:
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        ruleType:
          type: string
          description: The type of rule. See the <a href="https://ably.com/integrations">documentation</a>
            for further information.
          example: http
          enum:
          - http
        requestMode:
          type: string
          description: This is Single Request mode or Batch Request mode. Single Request
            mode sends each event separately to the endpoint specified by the rule.
            Batch Request mode rolls up multiple events into the same request. You
            can read more about the difference between single and batched events in
            the Ably <a href="https://ably.com/documentation/general/events#batching">documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source'
        target:
          $ref: '#/components/schemas/http_rule_post_target'
      additionalProperties: false
    http_rule_patch:
      required:
      - ruleType
      type: object
      properties:
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        ruleType:
          type: string
          description: The type of rule. See the <a href="https://ably.com/integrations">documentation</a>
            for further information.
          example: http
          enum:
          - http
        requestMode:
          type: string
          description: This is Single Request mode or Batch Request mode. Single Request
            mode sends each event separately to the endpoint specified by the rule.
            Batch Request mode rolls up multiple events into the same request. You
            can read more about the difference between single and batched events in
            the Ably <a href="https://ably.com/documentation/general/events#batching">documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source_patch'
        target:
          $ref: '#/components/schemas/http_rule_patch_target'
      additionalProperties: false
    http_rule_response:
      required:
      - requestMode
      - ruleType
      - source
      - target
      type: object
      properties:
        id:
          type: string
          description: The rule ID.
          example: 83IzAB
        appId:
          type: string
          description: The Ably application ID.
          example: 28GY6a
        version:
          type: string
          description: API version. Events and the format of their payloads are versioned.
            Please see the <a href="https://ably.com/documentation/general/events">Events
            documentation</a>.
          example: "1.2"
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        created:
          type: number
          description: Unix timestamp representing the date and time of creation of
            the rule.
          example: 1602844091815
        modified:
          type: number
          description: Unix timestamp representing the date and time of last modification
            of the rule.
          example: 1614679682091
        _links:
          type: object
          nullable: true
        ruleType:
          type: string
          description: The type of rule. See the <a href="https://ably.com/integrations">documentation</a>
            for further information.
          example: http
          enum:
          - http
        requestMode:
          type: string
          description: This is Single Request mode or Batch Request mode. Single Request
            mode sends each event separately to the endpoint specified by the rule.
            Batch Request mode rolls up multiple events into the same request. You
            can read more about the difference between single and batched events in
            the Ably <a href="https://ably.com/documentation/general/events#batching">documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source'
        target:
          $ref: '#/components/schemas/http_rule_post_target'
      additionalProperties: false
    ifttt_rule_post:
      required:
      - requestMode
      - ruleType
      - source
      - target
      type: object
      properties:
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        ruleType:
          type: string
          description: The type of rule. In this case IFTTT. See the <a href="https://ably.com/integrations">documentation</a>
            for further information.
          example: http/ifttt
          enum:
          - http/ifttt
        requestMode:
          type: string
          description: Single request mode sends each event separately to the endpoint
            specified by the rule. You can read more about single request mode events
            in the <a href="https://ably.com/documentation/general/events#batching">Ably
            documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source'
        target:
          $ref: '#/components/schemas/ifttt_rule_post_target'
      additionalProperties: false
    ifttt_rule_patch:
      required:
      - ruleType
      type: object
      properties:
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        ruleType:
          type: string
          description: The type of rule. In this case IFTTT. See the <a href="https://ably.com/integrations">documentation</a>
            for further information.
          example: http/ifttt
          enum:
          - http/ifttt
        requestMode:
          type: string
          description: Single request mode sends each event separately to the endpoint
            specified by the rule. You can read more about single request mode events
            in the <a href="https://ably.com/documentation/general/events#batching">Ably
            documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source_patch'
        target:
          $ref: '#/components/schemas/ifttt_rule_patch_target'
      additionalProperties: false
    ifttt_rule_response:
      required:
      - requestMode
      - ruleType
      - source
      - target
      type: object
      properties:
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        ruleType:
          type: string
          description: The type of rule. In this case IFTTT. See the <a href="https://ably.com/integrations">documentation</a>
            for further information.
          example: http/ifttt
          enum:
          - http/ifttt
        requestMode:
          type: string
          description: Single request mode sends each event separately to the endpoint
            specified by the rule. You can read more about single request mode events
            in the <a href="https://ably.com/documentation/general/events#batching">Ably
            documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source'
        target:
          $ref: '#/components/schemas/ifttt_rule_post_target'
        id:
          type: string
          description: The rule ID.
          example: 83IzAB
        appId:
          type: string
          description: The Ably application ID.
          example: 28GY6a
        version:
          type: string
          description: API version. Events and the format of their payloads are versioned.
            Please see the <a href="https://ably.com/documentation/general/events">Events
            documentation</a>.
          example: "1.2"
        created:
          type: number
          description: Unix timestamp representing the date and time of creation of
            the rule.
          example: 1602844091815
        modified:
          type: number
          description: Unix timestamp representing the date and time of last modification
            of the rule.
          example: 1614679682091
        _links:
          type: object
          nullable: true
      additionalProperties: false
    zapier_rule_post:
      required:
      - requestMode
      - ruleType
      - source
      - target
      type: object
      properties:
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        ruleType:
          type: string
          description: The type of rule. In this case Zapier. See the <a href="https://ably.com/integrations">documentation</a>
            for further information.
          example: http/zapier
          enum:
          - http/zapier
        requestMode:
          type: string
          description: This is Single Request mode or Batch Request mode. Single Request
            mode sends each event separately to the endpoint specified by the rule.
            Batch Request mode rolls up multiple events into the same request. You
            can read more about the difference between single and batched events in
            the Ably <a href="https://ably.com/documentation/general/events#batching">documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source'
        target:
          $ref: '#/components/schemas/zapier_rule_post_target'
      additionalProperties: false
    zapier_rule_patch:
      required:
      - ruleType
      type: object
      properties:
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        ruleType:
          type: string
          description: The type of rule. In this case Zapier. See the <a href="https://ably.com/integrations">documentation</a>
            for further information.
          example: http/zapier
          enum:
          - http/zapier
        requestMode:
          type: string
          description: This is Single Request mode or Batch Request mode. Single Request
            mode sends each event separately to the endpoint specified by the rule.
            Batch Request mode rolls up multiple events into the same request. You
            can read more about the difference between single and batched events in
            the Ably <a href="https://ably.com/documentation/general/events#batching">documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source_patch'
        target:
          $ref: '#/components/schemas/zapier_rule_patch_target'
      additionalProperties: false
    zapier_rule_response:
      required:
      - requestMode
      - ruleType
      - source
      - target
      type: object
      properties:
        id:
          type: string
          description: The rule ID.
          example: 83IzAB
        appId:
          type: string
          description: The Ably application ID.
          example: 28GY6a
        version:
          type: string
          description: API version. Events and the format of their payloads are versioned.
            Please see the <a href="https://ably.com/documentation/general/events">Events
            documentation</a>.
          example: "1.2"
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        created:
          type: number
          description: Unix timestamp representing the date and time of creation of
            the rule.
          example: 1602844091815
        modified:
          type: number
          description: Unix timestamp representing the date and time of last modification
            of the rule.
          example: 1614679682091
        _links:
          type: object
          nullable: true
        ruleType:
          type: string
          description: The type of rule. In this case Zapier. See the <a href="https://ably.com/integrations">documentation</a>
            for further information.
          example: http/zapier
          enum:
          - http/zapier
        requestMode:
          type: string
          description: This is Single Request mode or Batch Request mode. Single Request
            mode sends each event separately to the endpoint specified by the rule.
            Batch Request mode rolls up multiple events into the same request. You
            can read more about the difference between single and batched events in
            the Ably <a href="https://ably.com/documentation/general/events#batching">documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source'
        target:
          $ref: '#/components/schemas/zapier_rule_post_target'
      additionalProperties: false
    cloudflare_worker_rule_post:
      required:
      - requestMode
      - ruleType
      - source
      - target
      type: object
      properties:
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        ruleType:
          type: string
          description: The type of rule. In this case Cloudflare Worker. See the <a
            href="https://ably.com/integrations">documentation</a> for further information.
          example: http/cloudflare-worker
          enum:
          - http/cloudflare-worker
        requestMode:
          type: string
          description: This is Single Request mode or Batch Request mode. Single Request
            mode sends each event separately to the endpoint specified by the rule.
            Batch Request mode rolls up multiple events into the same request. You
            can read more about the difference between single and batched events in
            the Ably <a href="https://ably.com/documentation/general/events#batching">documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source'
        target:
          $ref: '#/components/schemas/zapier_rule_post_target'
      additionalProperties: false
    cloudflare_worker_rule_patch:
      required:
      - ruleType
      type: object
      properties:
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        ruleType:
          type: string
          description: The type of rule. In this case Cloudflare Worker. See the <a
            href="https://ably.com/integrations">documentation</a> for further information.
          example: http/cloudflare-worker
          enum:
          - http/cloudflare-worker
        requestMode:
          type: string
          description: This is Single Request mode or Batch Request mode. Single Request
            mode sends each event separately to the endpoint specified by the rule.
            Batch Request mode rolls up multiple events into the same request. You
            can read more about the difference between single and batched events in
            the Ably <a href="https://ably.com/documentation/general/events#batching">documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source_patch'
        target:
          $ref: '#/components/schemas/zapier_rule_patch_target'
      additionalProperties: false
    cloudflare_worker_rule_response:
      required:
      - requestMode
      - ruleType
      - source
      - target
      type: object
      properties:
        id:
          type: string
          description: The rule ID.
          example: 83IzAB
        appId:
          type: string
          description: The Ably application ID.
          example: 28GY6a
        version:
          type: string
          description: API version. Events and the format of their payloads are versioned.
            Please see the <a href="https://ably.com/documentation/general/events">Events
            documentation</a>.
          example: "1.2"
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        created:
          type: number
          description: Unix timestamp representing the date and time of creation of
            the rule.
          example: 1602844091815
        modified:
          type: number
          description: Unix timestamp representing the date and time of last modification
            of the rule.
          example: 1614679682091
        _links:
          type: object
          nullable: true
        ruleType:
          type: string
          description: The type of rule. In this case Cloudflare Worker. See the <a
            href="https://ably.com/integrations">documentation</a> for further information.
          example: http/cloudflare-worker
          enum:
          - http/cloudflare-worker
        requestMode:
          type: string
          description: This is Single Request mode or Batch Request mode. Single Request
            mode sends each event separately to the endpoint specified by the rule.
            Batch Request mode rolls up multiple events into the same request. You
            can read more about the difference between single and batched events in
            the Ably <a href="https://ably.com/documentation/general/events#batching">documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source'
        target:
          $ref: '#/components/schemas/zapier_rule_post_target'
      additionalProperties: false
    azure_function_rule_post:
      required:
      - requestMode
      - ruleType
      - source
      - target
      type: object
      properties:
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        ruleType:
          type: string
          description: The type of rule. In this case Microsoft Azure Function. See
            the <a href="https://ably.com/integrations">documentation</a> for further
            information.
          example: http/azure-function
          enum:
          - http/azure-function
        requestMode:
          type: string
          description: This is Single Request mode or Batch Request mode. Single Request
            mode sends each event separately to the endpoint specified by the rule.
            Batch Request mode rolls up multiple events into the same request. You
            can read more about the difference between single and batched events in
            the Ably <a href="https://ably.com/documentation/general/events#batching">documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source'
        target:
          $ref: '#/components/schemas/azure_function_rule_post_target'
      additionalProperties: false
    azure_function_rule_patch:
      required:
      - ruleType
      type: object
      properties:
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        ruleType:
          type: string
          description: The type of rule. In this case Microsoft Azure Function. See
            the <a href="https://ably.com/integrations">documentation</a> for further
            information.
          example: http/azure-function
          enum:
          - http/azure-function
        requestMode:
          type: string
          description: This is Single Request mode or Batch Request mode. Single Request
            mode sends each event separately to the endpoint specified by the rule.
            Batch Request mode rolls up multiple events into the same request. You
            can read more about the difference between single and batched events in
            the Ably <a href="https://ably.com/documentation/general/events#batching">documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source_patch'
        target:
          $ref: '#/components/schemas/azure_function_rule_patch_target'
      additionalProperties: false
    azure_function_rule_response:
      required:
      - requestMode
      - ruleType
      - source
      - target
      type: object
      properties:
        id:
          type: string
          description: The rule ID.
          example: 83IzAB
        appId:
          type: string
          description: The Ably application ID.
          example: 28GY6a
        version:
          type: string
          description: API version. Events and the format of their payloads are versioned.
            Please see the <a href="https://ably.com/documentation/general/events">Events
            documentation</a>.
          example: "1.2"
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        created:
          type: number
          description: Unix timestamp representing the date and time of creation of
            the rule.
          example: 1602844091815
        modified:
          type: number
          description: Unix timestamp representing the date and time of last modification
            of the rule.
          example: 1614679682091
        _links:
          type: object
          nullable: true
        ruleType:
          type: string
          description: The type of rule. In this case Microsoft Azure Function. See
            the <a href="https://ably.com/integrations">documentation</a> for further
            information.
          example: http/azure-function
          enum:
          - http/azure-function
        requestMode:
          type: string
          description: This is Single Request mode or Batch Request mode. Single Request
            mode sends each event separately to the endpoint specified by the rule.
            Batch Request mode rolls up multiple events into the same request. You
            can read more about the difference between single and batched events in
            the Ably <a href="https://ably.com/documentation/general/events#batching">documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source'
        target:
          $ref: '#/components/schemas/azure_function_rule_post_target'
      additionalProperties: false
    google_cloud_function_rule_post:
      required:
      - requestMode
      - ruleType
      - source
      - target
      type: object
      properties:
        ruleType:
          type: string
          description: The type of rule. In this case Google Cloud Function. See the
            <a href="https://ably.com/integrations">documentation</a> for further
            information.
          example: http/google-cloud-function
          enum:
          - http/google-cloud-function
        requestMode:
          type: string
          description: This is Single Request mode or Batch Request mode. Single Request
            mode sends each event separately to the endpoint specified by the rule.
            Batch Request mode rolls up multiple events into the same request. You
            can read more about the difference between single and batched events in
            the Ably <a href="https://ably.com/documentation/general/events#batching">documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source'
        target:
          $ref: '#/components/schemas/google_cloud_function_rule_post_target'
      additionalProperties: false
    google_cloud_function_rule_patch:
      required:
      - ruleType
      type: object
      properties:
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        ruleType:
          type: string
          description: The type of rule. In this case Google Cloud Function. See the
            <a href="https://ably.com/integrations">documentation</a> for further
            information.
          example: http/google-cloud-function
          enum:
          - http/google-cloud-function
        requestMode:
          type: string
          description: This is Single Request mode or Batch Request mode. Single Request
            mode sends each event separately to the endpoint specified by the rule.
            Batch Request mode rolls up multiple events into the same request. You
            can read more about the difference between single and batched events in
            the Ably <a href="https://ably.com/documentation/general/events#batching">documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source_patch'
        target:
          $ref: '#/components/schemas/google_cloud_function_rule_patch_target'
      additionalProperties: false
    google_cloud_function_rule_response:
      required:
      - requestMode
      - ruleType
      - source
      - target
      type: object
      properties:
        id:
          type: string
          description: The rule ID.
          example: 83IzAB
        appId:
          type: string
          description: The Ably application ID.
          example: 28GY6a
        version:
          type: string
          description: API version. Events and the format of their payloads are versioned.
            Please see the <a href="https://ably.com/documentation/general/events">Events
            documentation</a>.
          example: "1.2"
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        created:
          type: number
          description: Unix timestamp representing the date and time of creation of
            the rule.
          example: 1602844091815
        modified:
          type: number
          description: Unix timestamp representing the date and time of last modification
            of the rule.
          example: 1614679682091
        _links:
          type: object
          nullable: true
        ruleType:
          type: string
          description: The type of rule. In this case Google Cloud Function. See the
            <a href="https://ably.com/integrations">documentation</a> for further
            information.
          example: http/google-cloud-function
          enum:
          - http/google-cloud-function
        requestMode:
          type: string
          description: This is Single Request mode or Batch Request mode. Single Request
            mode sends each event separately to the endpoint specified by the rule.
            Batch Request mode rolls up multiple events into the same request. You
            can read more about the difference between single and batched events in
            the Ably <a href="https://ably.com/documentation/general/events#batching">documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source'
        target:
          $ref: '#/components/schemas/google_cloud_function_rule_post_target'
      additionalProperties: false
    aws_access_keys:
      required:
      - accessKeyId
      - secretAccessKey
      type: object
      properties:
        authenticationMode:
          type: string
          description: Authentication method is using AWS credentials (AWS key ID
            and secret key).
          example: credentials
          enum:
          - credentials
        accessKeyId:
          type: string
          description: The AWS key ID for the AWS IAM user. See this <a href="https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis">Ably
            knowledge base article</a> for details.
          example: AKIAIOSFODNN7EXAMPLE
        secretAccessKey:
          type: string
          description: The AWS secret key for the AWS IAM user. See this <a href="https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis">Ably
            knowledge base article</a> for details.
          example: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
      additionalProperties: false
    aws_access_keys_response:
      type: object
      properties:
        authenticationMode:
          type: string
          description: Authentication method is using AWS credentials (AWS key ID
            and secret key).
          example: credentials
          enum:
          - credentials
        accessKeyId:
          type: string
          description: The AWS key ID for the AWS IAM user. See this <a href="https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis">Ably
            knowledge base article</a> for details.
          example: AKIAIOSFODNN7EXAMPLE
      additionalProperties: false
    aws_assume_role:
      required:
      - assumeRoleArn
      type: object
      properties:
        authenticationMode:
          type: string
          description: Authentication method is using the ARN of an assumable role.
            See this <a href="https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis">Ably
            knowledge base article</a> for details.
          example: assumeRole
          enum:
          - assumeRole
        assumeRoleArn:
          type: string
          description: "If you are using the \"ARN of an assumable role\" authentication\
            \ method, this is your Assume Role ARN. See this <a href=\"https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis\"\
            >Ably knowledge base article</a> for details."
          example: arn:aws:iam::123456789012:user/Development/product_1234/*
      additionalProperties: false
    aws_lambda_rule_post:
      required:
      - requestMode
      - ruleType
      - source
      - target
      type: object
      properties:
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        ruleType:
          type: string
          description: The type of rule. In this case AWS Lambda. See the <a href="https://ably.com/integrations">documentation</a>
            for further information.
          example: aws/lambda
          enum:
          - aws/lambda
        requestMode:
          type: string
          description: Single request mode sends each event separately to the endpoint
            specified by the rule. You can read more about single request mode events
            in the <a href="https://ably.com/documentation/general/events#batching">Ably
            documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source'
        target:
          $ref: '#/components/schemas/aws_lambda_rule_post_target'
      additionalProperties: false
    aws_lambda_rule_patch:
      required:
      - ruleType
      type: object
      properties:
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        ruleType:
          type: string
          description: The type of rule. In this case AWS Lambda. See the <a href="https://ably.com/integrations">Ably
            documentation</a> for further information.
          example: aws/lambda
          enum:
          - aws/lambda
        requestMode:
          type: string
          description: Single request mode sends each event separately to the endpoint
            specified by the rule. You can read more about single request mode events
            in the <a href="https://ably.com/documentation/general/events#batching">Ably
            documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source_patch'
        target:
          $ref: '#/components/schemas/aws_lambda_rule_post_target'
      additionalProperties: false
    aws_lambda_rule_response:
      required:
      - requestMode
      - ruleType
      - source
      - target
      type: object
      properties:
        id:
          type: string
          description: The rule ID.
          example: 83IzAB
        appId:
          type: string
          description: The Ably application ID.
          example: 28GY6a
        version:
          type: string
          description: API version. Events and the format of their payloads are versioned.
            Please see the <a href="https://ably.com/documentation/general/events">Events
            documentation</a>.
          example: "1.2"
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        created:
          type: number
          description: Unix timestamp representing the date and time of creation of
            the rule.
          example: 1602844091815
        modified:
          type: number
          description: Unix timestamp representing the date and time of last modification
            of the rule.
          example: 1614679682091
        _links:
          type: object
          nullable: true
        ruleType:
          type: string
          description: The type of rule. In this case AWS Lambda. See the <a href="https://ably.com/integrations">documentation</a>
            for further information.
          example: aws/lambda
          enum:
          - aws/lambda
        requestMode:
          type: string
          description: Single request mode sends each event separately to the endpoint
            specified by the rule. You can read more about single request mode events
            in the <a href="https://ably.com/documentation/general/events#batching">Ably
            documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source'
        target:
          $ref: '#/components/schemas/aws_lambda_rule_response_target'
      additionalProperties: false
    aws_kinesis_rule_post:
      required:
      - requestMode
      - ruleType
      - source
      - target
      type: object
      properties:
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        ruleType:
          type: string
          description: The type of rule. In this case AWS Kinesis. See the <a href="https://ably.com/integrations">documentation</a>
            for further information.
          example: aws/kinesis
          enum:
          - aws/kinesis
        requestMode:
          type: string
          description: Single request mode sends each event separately to the endpoint
            specified by the rule. You can read more about single request mode events
            in the <a href="https://ably.com/documentation/general/events#batching">Ably
            documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source'
        target:
          $ref: '#/components/schemas/aws_kinesis_rule_post_target'
      additionalProperties: false
    aws_kinesis_rule_patch:
      required:
      - ruleType
      type: object
      properties:
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        ruleType:
          type: string
          description: The type of rule. In this case AWS Kinesis. See the <a href="https://ably.com/integrations">documentation</a>
            for further information.
          example: aws/kinesis
          enum:
          - aws/kinesis
        requestMode:
          type: string
          description: Single request mode sends each event separately to the endpoint
            specified by the rule. You can read more about single request mode events
            in the <a href="https://ably.com/documentation/general/events#batching">Ably
            documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source_patch'
        target:
          $ref: '#/components/schemas/aws_kinesis_rule_patch_target'
      additionalProperties: false
    aws_kinesis_rule_response:
      required:
      - requestMode
      - ruleType
      - source
      - target
      type: object
      properties:
        id:
          type: string
          description: The rule ID.
          example: 83IzAB
        appId:
          type: string
          description: The Ably application ID.
          example: 28GY6a
        version:
          type: string
          description: API version. Events and the format of their payloads are versioned.
            Please see the <a href="https://ably.com/documentation/general/events">Events
            documentation</a>.
          example: "1.2"
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        created:
          type: number
          description: Unix timestamp representing the date and time of creation of
            the rule.
          example: 1602844091815
        modified:
          type: number
          description: Unix timestamp representing the date and time of last modification
            of the rule.
          example: 1614679682091
        _links:
          type: object
          nullable: true
        ruleType:
          type: string
          description: The type of rule. In this case AWS Kinesis. See the <a href="https://ably.com/integrations">documentation</a>
            for further information.
          example: aws/kinesis
          enum:
          - aws/kinesis
        requestMode:
          type: string
          description: Single request mode sends each event separately to the endpoint
            specified by the rule. You can read more about single request mode events
            in the <a href="https://ably.com/documentation/general/events#batching">Ably
            documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source'
        target:
          $ref: '#/components/schemas/aws_kinesis_rule_response_target'
      additionalProperties: false
    aws_sqs_rule_post:
      required:
      - requestMode
      - ruleType
      - source
      - target
      type: object
      properties:
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        ruleType:
          type: string
          description: The type of rule. In this case AWS SQS. See the <a href="https://ably.com/integrations">documentation</a>
            for further information.
          example: aws/sqs
          enum:
          - aws/sqs
        requestMode:
          type: string
          description: Single request mode sends each event separately to the endpoint
            specified by the rule. You can read more about single request mode events
            in the <a href="https://ably.com/documentation/general/events#batching">Ably
            documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source'
        target:
          $ref: '#/components/schemas/aws_sqs_rule_post_target'
      additionalProperties: false
    aws_sqs_rule_patch:
      required:
      - ruleType
      type: object
      properties:
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        ruleType:
          type: string
          description: The type of rule. In this case AWS SQS. See the <a href="https://ably.com/integrations">documentation</a>
            for further information.
          example: aws/sqs
          enum:
          - aws/sqs
        requestMode:
          type: string
          description: Single request mode sends each event separately to the endpoint
            specified by the rule. You can read more about single request mode events
            in the <a href="https://ably.com/documentation/general/events#batching">Ably
            documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source_patch'
        target:
          $ref: '#/components/schemas/aws_sqs_rule_patch_target'
      additionalProperties: false
    aws_sqs_rule_response:
      required:
      - requestMode
      - ruleType
      - source
      - target
      type: object
      properties:
        id:
          type: string
          description: The rule ID.
          example: 83IzAB
        appId:
          type: string
          description: The Ably application ID.
          example: 28GY6a
        version:
          type: string
          description: API version. Events and the format of their payloads are versioned.
            Please see the <a href="https://ably.com/documentation/general/events">Events
            documentation</a>.
          example: "1.2"
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        created:
          type: number
          description: Unix timestamp representing the date and time of creation of
            the rule.
          example: 1602844091815
        modified:
          type: number
          description: Unix timestamp representing the date and time of last modification
            of the rule.
          example: 1614679682091
        _links:
          type: object
          nullable: true
        ruleType:
          type: string
          description: The type of rule. In this case AWS SQS. See the <a href="https://ably.com/integrations">documentation</a>
            for further information.
          example: aws/sqs
          enum:
          - aws/sqs
        requestMode:
          type: string
          description: Single request mode sends each event separately to the endpoint
            specified by the rule. You can read more about single request mode events
            in the <a href="https://ably.com/documentation/general/events#batching">Ably
            documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source'
        target:
          $ref: '#/components/schemas/aws_sqs_rule_response_target'
      additionalProperties: false
    amqp_rule_post:
      required:
      - requestMode
      - ruleType
      - source
      - target
      type: object
      properties:
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        ruleType:
          type: string
          description: The type of rule. In this case AMQP. See the <a href="https://ably.com/integrations">documentation</a>
            for further information.
          example: amqp
          enum:
          - amqp
        requestMode:
          type: string
          description: Single request mode sends each event separately to the endpoint
            specified by the rule. You can read more about single request mode events
            in the <a href="https://ably.com/documentation/general/events#batching">Ably
            documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source'
        target:
          $ref: '#/components/schemas/amqp_rule_post_target'
      additionalProperties: false
    amqp_rule_patch:
      required:
      - ruleType
      type: object
      properties:
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        ruleType:
          type: string
          description: The type of rule. In this case AMQP. See the <a href="https://ably.com/integrations">documentation</a>
            for further information.
          example: amqp
          enum:
          - amqp
        requestMode:
          type: string
          description: Single request mode sends each event separately to the endpoint
            specified by the rule. You can read more about single request mode events
            in the <a href="https://ably.com/documentation/general/events#batching">Ably
            documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source_patch'
        target:
          $ref: '#/components/schemas/amqp_rule_patch_target'
      additionalProperties: false
    amqp_rule_response:
      required:
      - requestMode
      - ruleType
      - source
      - target
      type: object
      properties:
        id:
          type: string
          description: The rule ID.
          example: 83IzAB
        appId:
          type: string
          description: The Ably application ID.
          example: 28GY6a
        version:
          type: string
          description: API version. Events and the format of their payloads are versioned.
            Please see the <a href="https://ably.com/documentation/general/events">Events
            documentation</a>.
          example: "1.2"
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        created:
          type: number
          description: Unix timestamp representing the date and time of creation of
            the rule.
          example: 1602844091815
        modified:
          type: number
          description: Unix timestamp representing the date and time of last modification
            of the rule.
          example: 1614679682091
        _links:
          type: object
          nullable: true
        ruleType:
          type: string
          description: The type of rule. In this case AMQP. See the <a href="https://ably.com/integrations">documentation</a>
            for further information.
          example: amqp
          enum:
          - amqp
        requestMode:
          type: string
          description: Single request mode sends each event separately to the endpoint
            specified by the rule. You can read more about single request mode events
            in the <a href="https://ably.com/documentation/general/events#batching">Ably
            documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source'
        target:
          $ref: '#/components/schemas/amqp_rule_post_target'
      additionalProperties: false
    amqp_external_rule_post:
      required:
      - requestMode
      - ruleType
      - source
      - target
      type: object
      properties:
        ruleType:
          type: string
          description: The type of rule. In this case AMQP external (using Firehose).
            See the <a href="https://ably.com/documentation/general/firehose">documentation</a>
            for further information.
          example: amqp/external
          enum:
          - amqp/external
        requestMode:
          type: string
          description: Single request mode sends each event separately to the endpoint
            specified by the rule. You can read more about single request mode events
            in the <a href="https://ably.com/documentation/general/events#batching">Ably
            documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source'
        target:
          $ref: '#/components/schemas/amqp_external_rule_post_target'
      additionalProperties: false
    amqp_external_rule_patch:
      required:
      - ruleType
      type: object
      properties:
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        ruleType:
          type: string
          description: The type of rule. In this case AMQP external (using Firehose).
            See the <a href="https://ably.com/documentation/general/firehose">Ably
            documentation</a> for further information.
          example: amqp/external
          enum:
          - amqp/external
        requestMode:
          type: string
          description: Single request mode sends each event separately to the endpoint
            specified by the rule. You can read more about single request mode events
            in the <a href="https://ably.com/documentation/general/events#batching">Ably
            documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source_patch'
        target:
          $ref: '#/components/schemas/amqp_external_rule_patch_target'
      additionalProperties: false
    amqp_external_rule_response:
      required:
      - requestMode
      - ruleType
      - source
      - target
      type: object
      properties:
        id:
          type: string
          description: The rule ID.
          example: 83IzAB
        appId:
          type: string
          description: The Ably application ID.
          example: 28GY6a
        version:
          type: string
          description: API version. Events and the format of their payloads are versioned.
            Please see the <a href="https://ably.com/documentation/general/events">Events
            documentation</a>.
          example: "1.2"
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        created:
          type: number
          description: Unix timestamp representing the date and time of creation of
            the rule.
          example: 1602844091815
        modified:
          type: number
          description: Unix timestamp representing the date and time of last modification
            of the rule.
          example: 1614679682091
        _links:
          type: object
          nullable: true
        ruleType:
          type: string
          description: The type of rule. In this case AMQP external (using Firehose).
            See the <a href="https://ably.com/documentation/general/firehose">Ably
            documentation</a> for further information.
          example: amqp/external
          enum:
          - amqp/external
        requestMode:
          type: string
          description: Single request mode sends each event separately to the endpoint
            specified by the rule. You can read more about single request mode events
            in the <a href="https://ably.com/documentation/general/events#batching">Ably
            documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source'
        target:
          $ref: '#/components/schemas/amqp_external_rule_response_target'
      additionalProperties: false
    unsupported_rule_response:
      required:
      - requestMode
      - ruleType
      - source
      - target
      type: object
      properties:
        id:
          type: string
          description: The rule ID.
          example: 83IzAB
        appId:
          type: string
          description: The Ably application ID.
          example: 28GY6a
        version:
          type: string
          description: API version. Events and the format of their payloads are versioned.
            Please see the <a href="https://ably.com/documentation/general/events">Events
            documentation</a>.
          example: "1.2"
        status:
          type: string
          description: The status of the rule. Rules can be enabled or disabled.
          example: enabled
        created:
          type: number
          description: Unix timestamp representing the date and time of creation of
            the rule.
          example: 1602844091815
        modified:
          type: number
          description: Unix timestamp representing the date and time of last modification
            of the rule.
          example: 1614679682091
        _links:
          type: object
          nullable: true
        ruleType:
          type: string
          description: This rule type is currently unsupported.
          example: unsupported
          enum:
          - unsupported
        requestMode:
          type: string
          description: This is Single Request mode or Batch Request mode. Single Request
            mode sends each event separately to the endpoint specified by the rule.
            Batch Request mode rolls up multiple events into the same request. You
            can read more about the difference between single and batched events in
            the Ably <a href="https://ably.com/documentation/general/events#batching">documentation</a>.
          example: single
        source:
          $ref: '#/components/schemas/rule_source'
        target:
          $ref: '#/components/schemas/unsupported_rule_response_target'
      additionalProperties: false
    queue:
      required:
      - maxLength
      - name
      - region
      - ttl
      type: object
      properties:
        name:
          type: string
          description: A friendly name for your queue.
          example: My queue
        ttl:
          type: integer
          description: TTL in minutes.
          example: 60
        maxLength:
          type: integer
          description: Message limit in number of messages.
          example: 10000
        region:
          type: string
          description: The data center region. US East (Virginia) or EU West (Ireland).
            Values are `us-east-1-a` or `eu-west-1-a`.
          example: us-east-1-a
      additionalProperties: false
    queue_response:
      type: object
      properties:
        id:
          type: string
          description: The ID of the Ably queue
          example: 28AB6w:us-east-1-a:My queue
        appId:
          type: string
          description: The Ably application ID.
          example: 28AB6w
        name:
          type: string
          description: The friendly name of the queue.
          example: My queue
        region:
          type: string
          description: The data center region for the queue.
          example: eu-west-1-a
        amqp:
          $ref: '#/components/schemas/queue_response_amqp'
        stomp:
          $ref: '#/components/schemas/queue_response_stomp'
        state:
          type: string
          description: The current state of the queue.
          example: Running
        messages:
          $ref: '#/components/schemas/queue_response_messages'
        stats:
          $ref: '#/components/schemas/queue_response_stats'
        ttl:
          type: integer
          description: TTL in minutes.
          example: 60
        maxLength:
          type: integer
          description: Message limit in number of messages.
          example: 10000
        deadletter:
          type: boolean
          description: A boolean that indicates whether this is a dead letter queue
            or not.
          example: false
        deadletterId:
          type: string
          description: The ID of the dead letter queue.
          nullable: true
          example: 28AB6w:us-east-1-a:deadletter
      additionalProperties: false
      example:
        deadletterId: 28AB6w:us-east-1-a:deadletter
        amqp:
          queueName: 28AB6w:My queue
          uri: amqps://us-east-1-a-queue.ably.io:5671/shared
        deadletter: false
        ttl: 60
        stats:
          deliveryRate: 6.027456183070403
          publishRate: 0.8008281904610115
          acknowledgementRate: 1.4658129805029452
        appId: 28AB6w
        name: My queue
        messages:
          total: 0
          ready: 0
          unacknowledged: 0
        id: 28AB6w:us-east-1-a:My queue
        stomp:
          host: shared
          destination: /amqp/queue/28AB6w:My queue
          uri: stomp://us-east-1-a-queue.ably.io:61614
        state: Running
        region: eu-west-1-a
        maxLength: 10000
    namespace_post:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: "The namespace or channel name that the channel rule will apply\
            \ to. For example, if you specify `namespace` the namespace will be set\
            \ to `namespace` and will match with channels `namespace:*` and `namespace`."
          example: namespace
        authenticated:
          type: boolean
          description: "If `true`, clients will not be permitted to use (including\
            \ to attach, publish, or subscribe) any channels within this namespace\
            \ unless they are identified, that is, authenticated using a client ID.\
            \ See the <a href=\"https://knowledge.ably.com/authenticated-and-identified-clients\"\
            >Ably Knowledge base</a> for more details."
          example: false
          default: false
        persisted:
          type: boolean
          description: "If `true`, all messages on a channel will be stored for 24\
            \ hours. You can access stored messages via the History API. Please note\
            \ that for each message stored, an additional message is deducted from\
            \ your monthly allocation."
          example: false
          default: false
        persistLast:
          type: boolean
          description: "If `true`, the last message published on a channel will be\
            \ stored for 365 days. You can access the stored message only by using\
            \ the channel rewind mechanism and attaching with rewind=1. Please note\
            \ that for each message stored, an additional message is deducted from\
            \ your monthly allocation."
          example: false
          default: false
        pushEnabled:
          type: boolean
          description: "If `true`, publishing messages with a push payload in the\
            \ extras field is permitted and can trigger the delivery of a native push\
            \ notification to registered devices for the channel."
          example: false
          default: false
        tlsOnly:
          type: boolean
          description: "If `true`, only clients that are connected using TLS will\
            \ be permitted to subscribe to any channels within this namespace."
          example: false
          default: false
      additionalProperties: false
    namespace_patch:
      type: object
      properties:
        authenticated:
          type: boolean
          description: "If `true`, clients will not be permitted to use (including\
            \ to attach, publish, or subscribe) any channels within this namespace\
            \ unless they are identified, that is, authenticated using a client ID.\
            \ See the <a href=\"https://knowledge.ably.com/authenticated-and-identified-clients\"\
            >Ably knowledge base/a> for more details."
          example: false
          default: false
        persisted:
          type: boolean
          description: "If `true`, all messages on a channel will be stored for 24\
            \ hours. You can access stored messages via the History API. Please note\
            \ that for each message stored, an additional message is deducted from\
            \ your monthly allocation."
          example: false
          default: false
        persistLast:
          type: boolean
          description: "If `true`, the last message published on a channel will be\
            \ stored for 365 days. You can access the stored message only by using\
            \ the channel rewind mechanism and attaching with rewind=1. Please note\
            \ that for each message stored, an additional message is deducted from\
            \ your monthly allocation."
          example: false
          default: false
        pushEnabled:
          type: boolean
          description: "If `true`, publishing messages with a push payload in the\
            \ extras field is permitted and can trigger the delivery of a native push\
            \ notification to registered devices for the channel."
          example: false
          default: false
        tlsOnly:
          type: boolean
          description: "If `true`, only clients that are connected using TLS will\
            \ be permitted to subscribe to any channels within this namespace."
          example: false
          default: false
      additionalProperties: false
    namespace_response:
      type: object
      properties:
        authenticated:
          type: boolean
          description: "If `true`, clients will not be permitted to use (including\
            \ to attach, publish, or subscribe) any channels within this namespace\
            \ unless they are identified, that is, authenticated using a client ID.\
            \ See the <a href=\"https://knowledge.ably.com/authenticated-and-identified-clients\"\
            >Ably knowledge base</a> for more details."
          example: false
          default: false
        created:
          type: integer
          description: Unix timestamp representing the date and time of creation of
            the namespace.
          example: 1602844091815
        modified:
          type: integer
          description: Unix timestamp representing the date and time of last modification
            of the namespace.
          example: 1614679682091
        id:
          type: string
          description: "The namespace or channel name that the channel rule will apply\
            \ to. For example, if you specify `namespace` the namespace will be set\
            \ to `namespace` and will match with channels `namespace:*` and `namespace`."
          example: namespace
        persisted:
          type: boolean
          description: "If `true`, all messages on a channel will be stored for 24\
            \ hours. You can access stored messages via the History API. Please note\
            \ that for each message stored, an additional message is deducted from\
            \ your monthly allocation."
          example: false
          default: false
        persistLast:
          type: boolean
          description: "If `true`, the last message published on a channel will be\
            \ stored for 365 days. You can access the stored message only by using\
            \ the channel rewind mechanism and attaching with rewind=1. Please note\
            \ that for each message stored, an additional message is deducted from\
            \ your monthly allocation."
          example: false
          default: false
        pushEnabled:
          type: boolean
          description: "If `true`, publishing messages with a push payload in the\
            \ extras field is permitted and can trigger the delivery of a native push\
            \ notification to registered devices for the channel."
          example: false
          default: false
        tlsOnly:
          type: boolean
          description: "If `true`, only clients that are connected using TLS will\
            \ be permitted to subscribe to any channels within this namespace."
          example: false
          default: false
      additionalProperties: false
      example:
        persistLast: false
        authenticated: false
        created: 1602844091815
        pushEnabled: false
        modified: 1614679682091
        id: namespace
        persisted: false
        tlsOnly: false
    app_post:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the application for your reference only.
          example: My App
        status:
          type: string
          description: The status of the application. Can be `enabled` or `disabled`.
            Enabled means available to accept inbound connections and all services
            are available.
          example: enabled
        tlsOnly:
          type: boolean
          description: Enforce TLS for all connections.
          nullable: true
          example: true
        fcmKey:
          type: string
          description: The Firebase Cloud Messaging key.
          nullable: true
          example: AABBQ1KyxCE:APA91bCCYs7r_Q-sqW8HMP_hV4t3vMYx...cJ8344-MhGWODZEuAmg_J4MUJcVQEyDn...I
        apnsCertificate:
          type: string
          description: The Apple Push Notification service certificate.
          nullable: true
          example: '-----BEGIN CERTIFICATE-----MIIFaDCC...EXAMPLE...3Dc=-----END CERTIFICATE-----'
        apnsPrivateKey:
          type: string
          description: The Apple Push Notification service private key.
          nullable: true
          example: '-----BEGIN PRIVATE KEY-----ABCFaDCC...EXAMPLE...3Dc=-----END PRIVATE
            KEY-----'
        apnsUseSandboxEndpoint:
          type: boolean
          description: The Apple Push Notification service sandbox endpoint.
          nullable: true
          example: false
      additionalProperties: false
    app_patch:
      type: object
      properties:
        name:
          type: string
          description: The name of the application for your reference only.
          example: My App
        status:
          type: string
          description: The status of the application. Can be `enabled` or `disabled`.
            Enabled means available to accept inbound connections and all services
            are available.
          example: enabled
        tlsOnly:
          type: boolean
          description: Enforce TLS for all connections.
          nullable: true
          example: true
        fcmKey:
          type: string
          description: The Firebase Cloud Messaging key.
          nullable: true
          example: AABBQ1KyxCE:APA91bCCYs7r_Q-sqW8HMP_hV4t3vMYx...cJ8344-MhGWODZEuAmg_J4MUJcVQEyDn...I
        apnsCertificate:
          type: string
          description: The Apple Push Notification service certificate.
          nullable: true
          example: '-----BEGIN CERTIFICATE-----MIIFaDCC...EXAMPLE...3Dc=-----END CERTIFICATE-----'
        apnsPrivateKey:
          type: string
          description: The Apple Push Notification service private key.
          nullable: true
          example: '-----BEGIN PRIVATE KEY-----ABCFaDCC...EXAMPLE...3Dc=-----END PRIVATE
            KEY-----'
        apnsUseSandboxEndpoint:
          type: boolean
          description: The Apple Push Notification service sandbox endpoint.
          nullable: true
          example: false
      additionalProperties: false
    app_pkcs12:
      required:
      - p12File
      - p12Pass
      type: object
      properties:
        p12File:
          type: string
          description: The `.p12` file containing the app's APNs information.
          format: binary
        p12Pass:
          type: string
          description: The password for the corresponding `.p12` file.
          example: secret
      additionalProperties: false
    app_response:
      type: object
      properties:
        accountId:
          type: string
          description: The ID of your Ably account.
          example: WgRpOB
        id:
          type: string
          description: The application ID.
          example: 28AB6x
        name:
          type: string
          description: The application name.
          example: Default
        status:
          type: string
          description: The application status. Disabled applications will not accept
            new connections and will return an error to all clients.
          example: enabled
        tlsOnly:
          type: boolean
          description: Enforce TLS for all connections. This setting overrides any
            channel setting.
          nullable: true
          example: true
        apnsUseSandboxEndpoint:
          type: boolean
          description: Apple Push Notification service endpoint.
          nullable: true
          example: false
        _links:
          type: object
          description: A link self-referencing the app that has been created.
          nullable: true
      additionalProperties: false
      example:
        accountId: WgRpOB
        _links: {}
        apnsUseSandboxEndpoint: false
        name: Default
        id: 28AB6x
        status: enabled
        tlsOnly: true
    key_post:
      required:
      - capability
      - name
      type: object
      properties:
        name:
          type: string
          description: The name for your API key. This is a friendly name for your
            reference.
          example: My key name
        capability:
          type: object
          additionalProperties:
            type: array
            description: An array of strings setting the capability operations for
              the resource.
            items:
              type: string
          description: These are the capability operations described in the <a href="https://ably.com/documentation/core-features/authentication#capability-operations">Ably
            documentation</a>.
      additionalProperties: false
      example:
        name: My key name
        capability:
          channel1:
          - publish
          - subscribe
          channel2:
          - history
    key_patch:
      type: object
      properties:
        name:
          type: string
          description: The name for your API key. This is a friendly name for your
            reference.
          example: My key name
        capability:
          type: object
          additionalProperties:
            type: array
            description: An array of strings setting the capability operations for
              the resource.
            items:
              type: string
          description: These are the capability operations described in the <a href="https://ably.com/documentation/core-features/authentication#capability-operations">Ably
            documentation</a>.
      additionalProperties: false
      example:
        name: My key name
        capability:
          channel1:
          - publish
          - subscribe
          channel2:
          - history
    key_response:
      type: object
      properties:
        appId:
          type: string
          description: The Ably application ID which this key is associated with.
          example: 28GY6a
        id:
          type: string
          description: The key ID.
          example: G8dabc
        name:
          type: string
          description: The name for your API key. This is a friendly name for your
            reference.
          example: My key name
        key:
          type: string
          description: The complete API key including API secret.
        capability:
          type: object
          additionalProperties:
            type: array
            description: An array of strings setting the capability operations for
              the resource.
            items:
              type: string
          description: The capabilities that this key has. More information on capabilities
            can be found in the <a href="https://ably.com/documentation/core-features/authentication#capabilities-explained">Ably
            documentation</a>.
          example:
            channel1:
            - publish
            - subscribe
            channel2:
            - history
        created:
          type: integer
          description: Unix timestamp representing the date and time of creation of
            the key.
          example: 1602844091815
        modified:
          type: integer
          description: Unix timestamp representing the date and time of the last modification
            of the key.
          example: 1614679682091
      additionalProperties: false
      example:
        capability:
          channel1:
          - publish
          - subscribe
          channel2:
          - history
        created: 1602844091815
        appId: 28GY6a
        name: My key name
        modified: 1614679682091
        id: G8dabc
        key: key
    me:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/me_token'
        user:
          $ref: '#/components/schemas/me_user'
        account:
          $ref: '#/components/schemas/me_account'
      additionalProperties: false
      example:
        user:
          id: 12345
          email: user@example.com
        account:
          name: Free account
          id: VpWaOA
        token:
          capabilities:
          - write:namespace
          - read:namespace
          - write:queue
          - read:queue
          - write:rule
          - read:rule
          - write:key
          - read:key
          - write:app
          - read:app
          name: My Token
          id: 12345
    error:
      required:
      - code
      - href
      - message
      - statusCode
      type: object
      properties:
        message:
          type: string
          description: The error message.
        code:
          type: integer
          description: The HTTP status code returned.
        statusCode:
          type: integer
          description: The Ably error code.
        href:
          type: string
          description: The URL to documentation about the error code.
        details:
          type: object
          description: Any additional details about the error message.
          nullable: true
      additionalProperties: false
    http_rule_post_target_headers:
      type: object
      properties:
        name:
          type: string
          description: The name of the header.
          example: User-Agent
        value:
          type: string
          description: The value of the header.
          example: user-agent-string
    http_rule_post_target:
      required:
      - format
      - url
      type: object
      properties:
        url:
          type: string
          description: The webhook URL that Ably will POST events to.
          example: https://example.com/webhooks
        headers:
          type: array
          description: "If you have additional information to send, you'll need to\
            \ include the relevant headers."
          example:
          - name: User-Agent
            value: user-agent-string
          - name: headerName
            value: headerValue
          items:
            $ref: '#/components/schemas/http_rule_post_target_headers'
        signingKeyId:
          type: string
          description: The signing key ID for use in `batch` mode. Ably will optionally
            sign the payload using an API key ensuring your servers can validate the
            payload using the private API key. See the <a href="https://ably.com/documentation/general/events#security">webhook
            security docs</a> for more information.
          nullable: true
          example: bw66AB
        enveloped:
          type: boolean
          description: "Messages delivered through Reactor are wrapped in an Ably\
            \ envelope by default that contains metadata about the message and its\
            \ payload. The form of the envelope depends on whether it is part of a\
            \ Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks,\
            \ you can ensure you only get the raw payload by unchecking \"Enveloped\"\
            \ when setting up the rule."
          nullable: true
          example: true
        format:
          type: string
          description: "JSON provides a simpler text-based encoding, whereas MsgPack\
            \ provides a more efficient binary encoding."
          example: json
      additionalProperties: false
    http_rule_patch_target:
      type: object
      properties:
        url:
          type: string
          description: The webhook URL that Ably will POST events to.
          example: https://example.com/webhooks
        headers:
          type: array
          description: "If you have additional information to send, you'll need to\
            \ include the relevant headers."
          example:
          - name: User-Agent
            value: user-agent-string
          - name: headerName
            value: headerValue
          items:
            $ref: '#/components/schemas/http_rule_post_target_headers'
        signingKeyId:
          type: string
          description: The signing key ID for use in `batch` mode. Ably will optionally
            sign the payload using an API key ensuring your servers can validate the
            payload using the private API key. See the <a href="https://ably.com/documentation/general/events#security">webhook
            security docs</a> for more information.
          nullable: true
          example: bw66AB
        enveloped:
          type: boolean
          description: "Messages delivered through Reactor are wrapped in an Ably\
            \ envelope by default that contains metadata about the message and its\
            \ payload. The form of the envelope depends on whether it is part of a\
            \ Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks,\
            \ you can ensure you only get the raw payload by unchecking \"Enveloped\"\
            \ when setting up the rule."
          nullable: true
          example: true
        format:
          type: string
          description: "JSON provides a simpler text-based encoding, whereas MsgPack\
            \ provides a more efficient binary encoding."
          example: json
      additionalProperties: false
    ifttt_rule_post_target:
      required:
      - eventName
      - webhookKey
      type: object
      properties:
        webhookKey:
          type: string
          description: The key in the Webhook Service Documentation page of your IFTTT
            account.
          example: aBcd12Ef98-Z1ab3yTe-EXAMPLE
        eventName:
          type: string
          description: "The Event name is used to identify the IFTTT applet that will\
            \ receive the Reactor Event, make sure the name matches the name of the\
            \ IFTTT applet."
          example: MyAppletName
      additionalProperties: false
    ifttt_rule_patch_target:
      type: object
      properties:
        webhookKey:
          type: string
          description: The key in the Webhook Service Documentation page of your IFTTT
            account.
          example: aBcd12Ef98-Z1ab3yTe-EXAMPLE
        eventName:
          type: string
          description: "The Event name is used to identify the IFTTT applet that will\
            \ receive the Reactor Event, make sure the name matches the name of the\
            \ IFTTT applet."
          example: MyAppletName
      additionalProperties: false
    zapier_rule_post_target:
      required:
      - url
      type: object
      properties:
        url:
          type: string
          description: The webhook URL that Ably will POST events to.
          example: https://example.com/webhooks
        headers:
          type: array
          description: "If you have additional information to send, you'll need to\
            \ include the relevant headers."
          example:
          - name: User-Agent
            value: user-agent-string
          - name: headerName
            value: headerValue
          items:
            $ref: '#/components/schemas/http_rule_post_target_headers'
        signingKeyId:
          type: string
          description: The signing key ID for use in `batch` mode. Ably will optionally
            sign the payload using an API key ensuring your servers can validate the
            payload using the private API key. See the <a href="https://ably.com/documentation/general/events#security">webhook
            security docs</a> for more information.
          nullable: true
          example: bw66AB
      additionalProperties: false
    zapier_rule_patch_target:
      type: object
      properties:
        url:
          type: string
          description: The webhook URL that Ably will POST events to.
          example: https://example.com/webhooks
        headers:
          type: array
          description: "If you have additional information to send, you'll need to\
            \ include the relevant headers."
          example:
          - name: User-Agent
            value: user-agent-string
          - name: headerName
            value: headerValue
          items:
            $ref: '#/components/schemas/http_rule_post_target_headers'
        signingKeyId:
          type: string
          description: The signing key ID for use in `batch` mode. Ably will optionally
            sign the payload using an API key ensuring your servers can validate the
            payload using the private API key. See the <a href="https://ably.com/documentation/general/events#security">webhook
            security docs</a> for more information.
          nullable: true
          example: bw66AB
      additionalProperties: false
    azure_function_rule_post_target:
      required:
      - azureAppId
      - azureFunctionName
      type: object
      properties:
        azureAppId:
          type: string
          description: The Microsoft Azure Application ID. You can find your Microsoft
            Azure Application ID as shown in this <a href="https://dev.applicationinsights.io/documentation/Authorization/API-key-and-App-ID">article</a>.
          example: d1e9f419-c438-6032b32df979
        azureFunctionName:
          type: string
          description: The name of your Microsoft Azure Function.
          example: myFunctionName
        headers:
          type: array
          description: "If you have additional information to send, you'll need to\
            \ include the relevant headers."
          example:
          - name: User-Agent
            value: user-agent-string
          - name: headerName
            value: headerValue
          items:
            $ref: '#/components/schemas/http_rule_post_target_headers'
        signingKeyId:
          type: string
          description: The signing key ID for use in `batch` mode. Ably will optionally
            sign the payload using an API key ensuring your servers can validate the
            payload using the private API key. See the <a href="https://ably.com/documentation/general/events#security">webhook
            security docs</a> for more information.
          nullable: true
          example: bw66AB
        enveloped:
          type: boolean
          description: "Messages delivered through Reactor are wrapped in an Ably\
            \ envelope by default that contains metadata about the message and its\
            \ payload. The form of the envelope depends on whether it is part of a\
            \ Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks,\
            \ you can ensure you only get the raw payload by unchecking \"Enveloped\"\
            \ when setting up the rule."
          nullable: true
          example: true
        format:
          type: string
          description: JSON provides a text-based encoding.
          example: json
      additionalProperties: false
    azure_function_rule_patch_target:
      type: object
      properties:
        azureAppId:
          type: string
          description: The Microsoft Azure Application ID. You can find your Microsoft
            Azure Application ID as shown in this <a href="https://dev.applicationinsights.io/documentation/Authorization/API-key-and-App-ID">article</a>.
          example: d1e9f419-c438-6032b32df979
        azureFunctionName:
          type: string
          description: The name of your Microsoft Azure Function.
          example: myFunctionName
        headers:
          type: array
          description: "If you have additional information to send, you'll need to\
            \ include the relevant headers."
          example:
          - name: User-Agent
            value: user-agent-string
          - name: headerName
            value: headerValue
          items:
            $ref: '#/components/schemas/http_rule_post_target_headers'
        signingKeyId:
          type: string
          description: The signing key ID for use in `batch` mode. Ably will optionally
            sign the payload using an API key ensuring your servers can validate the
            payload using the private API key. See the <a href="https://ably.com/documentation/general/events#security">webhook
            security docs</a> for more information.
          nullable: true
          example: bw66AB
        enveloped:
          type: boolean
          description: "Messages delivered through Reactor are wrapped in an Ably\
            \ envelope by default that contains metadata about the message and its\
            \ payload. The form of the envelope depends on whether it is part of a\
            \ Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks,\
            \ you can ensure you only get the raw payload by unchecking \"Enveloped\"\
            \ when setting up the rule."
          nullable: true
          example: true
        format:
          type: string
          description: JSON provides a text-based encoding.
          example: json
      additionalProperties: false
    google_cloud_function_rule_post_target:
      required:
      - functionName
      - projectId
      - region
      type: object
      properties:
        region:
          type: string
          description: The region in which your Google Cloud Function is hosted. See
            the <a href="https://cloud.google.com/compute/docs/regions-zones/">Google
            documentation</a> for more details.
          example: us-west1
        projectId:
          type: string
          description: The project ID for your Google Cloud Project that was generated
            when you created your project.
          example: my-sample-project-191923
        functionName:
          type: string
          description: The name of your Google Cloud Function.
          example: myFunctionName
        headers:
          type: array
          description: "If you have additional information to send, you'll need to\
            \ include the relevant headers."
          example:
          - name: User-Agent
            value: user-agent-string
          - name: headerName
            value: headerValue
          items:
            $ref: '#/components/schemas/http_rule_post_target_headers'
        signingKeyId:
          type: string
          description: The signing key ID for use in `batch` mode. Ably will optionally
            sign the payload using an API key ensuring your servers can validate the
            payload using the private API key. See the <a href="https://ably.com/documentation/general/events#security">webhook
            security docs</a> for more information.
          nullable: true
          example: bw66AB
        enveloped:
          type: boolean
          description: "Messages delivered through Reactor are wrapped in an Ably\
            \ envelope by default that contains metadata about the message and its\
            \ payload. The form of the envelope depends on whether it is part of a\
            \ Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks,\
            \ you can ensure you only get the raw payload by unchecking \"Enveloped\"\
            \ when setting up the rule."
          nullable: true
          example: true
        format:
          type: string
          description: JSON provides a text-based encoding.
          example: json
      additionalProperties: false
    google_cloud_function_rule_patch_target:
      type: object
      properties:
        region:
          type: string
          description: The region in which your Google Cloud Function is hosted. See
            the <a href="https://cloud.google.com/compute/docs/regions-zones/">Google
            documentation</a> for more details.
          example: us-west1
        projectId:
          type: string
          description: The project ID for your Google Cloud Project that was generated
            when you created your project.
          example: my-sample-project-191923
        functionName:
          type: string
          description: The name of your Google Cloud Function.
          example: myFunctionName
        headers:
          type: array
          description: "If you have additional information to send, you'll need to\
            \ include the relevant headers."
          example:
          - name: User-Agent
            value: user-agent-string
          - name: headerName
            value: headerValue
          items:
            $ref: '#/components/schemas/http_rule_post_target_headers'
        signingKeyId:
          type: string
          description: The signing key ID for use in `batch` mode. Ably will optionally
            sign the payload using an API key ensuring your servers can validate the
            payload using the private API key. See the <a href="https://ably.com/documentation/general/events#security">webhook
            security docs</a> for more information.
          nullable: true
          example: bw66AB
        enveloped:
          type: boolean
          description: "Messages delivered through Reactor are wrapped in an Ably\
            \ envelope by default that contains metadata about the message and its\
            \ payload. The form of the envelope depends on whether it is part of a\
            \ Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks,\
            \ you can ensure you only get the raw payload by unchecking \"Enveloped\"\
            \ when setting up the rule."
          nullable: true
          example: true
        format:
          type: string
          description: JSON provides a text-based encoding.
          example: json
      additionalProperties: false
    aws_lambda_rule_post_target:
      required:
      - authentication
      - functionName
      - region
      type: object
      properties:
        region:
          type: string
          description: The region is which your AWS Lambda Function is hosted. See
            the <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region">AWS
            documentation</a> for more detail.
          example: us-west-1
        functionName:
          type: string
          description: The name of your AWS Lambda Function.
          example: myFunctionName
        authentication:
          discriminator:
            propertyName: authenticationMode
            mapping:
              credentials: '#/components/schemas/aws_access_keys'
              assumeRole: '#/components/schemas/aws_assume_role'
          oneOf:
          - $ref: '#/components/schemas/aws_access_keys'
          - $ref: '#/components/schemas/aws_assume_role'
        enveloped:
          type: boolean
          description: "Messages delivered through Reactor are wrapped in an Ably\
            \ envelope by default that contains metadata about the message and its\
            \ payload. The form of the envelope depends on whether it is part of a\
            \ Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks,\
            \ you can ensure you only get the raw payload by unchecking \"Enveloped\"\
            \ when setting up the rule."
          nullable: true
          example: true
      additionalProperties: false
    aws_lambda_rule_response_target:
      required:
      - authentication
      - functionName
      - region
      type: object
      properties:
        region:
          type: string
          description: The region is which your AWS Lambda Function is hosted. See
            the <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region">AWS
            documentation</a> for more detail.
          example: us-west-1
        functionName:
          type: string
          description: The name of your AWS Lambda Function.
          example: myFunctionName
        authentication:
          discriminator:
            propertyName: authenticationMode
            mapping:
              credentials: '#/components/schemas/aws_access_keys_response'
              assumeRole: '#/components/schemas/aws_assume_role'
          oneOf:
          - $ref: '#/components/schemas/aws_access_keys_response'
          - $ref: '#/components/schemas/aws_assume_role'
        enveloped:
          type: boolean
          description: "Messages delivered through Reactor are wrapped in an Ably\
            \ envelope by default that contains metadata about the message and its\
            \ payload. The form of the envelope depends on whether it is part of a\
            \ Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks,\
            \ you can ensure you only get the raw payload by unchecking \"Enveloped\"\
            \ when setting up the rule."
          nullable: true
          example: true
        format:
          type: string
          description: JSON provides a text-based encoding.
          example: json
      additionalProperties: false
    aws_kinesis_rule_post_target:
      required:
      - authentication
      - format
      - partitionKey
      - region
      - streamName
      type: object
      properties:
        region:
          type: string
          description: The region is which AWS Kinesis is hosted. See the <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region">AWS
            documentation</a> for more detail.
          example: us-west-1
        streamName:
          type: string
          description: The name of your AWS Kinesis Stream.
          example: myStreamName
        partitionKey:
          type: string
          description: The AWS Kinesis partition key. The partition key is used by
            Kinesis to route messages to one of the stream shards. See this <a href="https://knowledge.ably.com/what-is-the-format-of-the-routingkey-for-an-amqp-or-kinesis-reactor-rule">Ably
            knowledge base article</a> for details.
          example: "message name: #{message.name}, clientId: #{message.clientId}"
        authentication:
          discriminator:
            propertyName: authenticationMode
            mapping:
              credentials: '#/components/schemas/aws_access_keys'
              assumeRole: '#/components/schemas/aws_assume_role'
          oneOf:
          - $ref: '#/components/schemas/aws_access_keys'
          - $ref: '#/components/schemas/aws_assume_role'
        enveloped:
          type: boolean
          description: "Messages delivered through Reactor are wrapped in an Ably\
            \ envelope by default that contains metadata about the message and its\
            \ payload. The form of the envelope depends on whether it is part of a\
            \ Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks,\
            \ you can ensure you only get the raw payload by unchecking \"Enveloped\"\
            \ when setting up the rule."
          nullable: true
          example: true
        format:
          type: string
          description: JSON provides a text-based encoding.
          example: json
      additionalProperties: false
    aws_kinesis_rule_patch_target:
      type: object
      properties:
        region:
          type: string
          description: The region is which AWS Kinesis is hosted. See the <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region">AWS
            documentation</a> for more detail.
          example: us-west-1
        streamName:
          type: string
          description: The name of your AWS Kinesis Stream.
          example: myStreamName
        partitionKey:
          type: string
          description: The AWS Kinesis partition key. The partition key is used by
            Kinesis to route messages to one of the stream shards. See this <a href="https://knowledge.ably.com/what-is-the-format-of-the-routingkey-for-an-amqp-or-kinesis-reactor-rule">Ably
            knowledge base article</a> for details.
          example: "message name: #{message.name}, clientId: #{message.clientId}"
        authentication:
          discriminator:
            propertyName: authenticationMode
            mapping:
              credentials: '#/components/schemas/aws_access_keys'
              assumeRole: '#/components/schemas/aws_assume_role'
          oneOf:
          - $ref: '#/components/schemas/aws_access_keys'
          - $ref: '#/components/schemas/aws_assume_role'
        enveloped:
          type: boolean
          description: "Messages delivered through Reactor are wrapped in an Ably\
            \ envelope by default that contains metadata about the message and its\
            \ payload. The form of the envelope depends on whether it is part of a\
            \ Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks,\
            \ you can ensure you only get the raw payload by unchecking \"Enveloped\"\
            \ when setting up the rule."
          nullable: true
          example: true
        format:
          type: string
          description: JSON provides a text-based encoding.
          example: json
      additionalProperties: false
    aws_kinesis_rule_response_target:
      required:
      - authentication
      - format
      - partitionKey
      - region
      - streamName
      type: object
      properties:
        region:
          type: string
          description: The region is which AWS Kinesis is hosted. See the <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region">AWS
            documentation</a> for more detail.
          example: us-west-1
        streamName:
          type: string
          description: The name of your AWS Kinesis Stream.
          example: myStreamName
        partitionKey:
          type: string
          description: The AWS Kinesis partition key. The partition key is used by
            Kinesis to route messages to one of the stream shards. See this <a href="https://knowledge.ably.com/what-is-the-format-of-the-routingkey-for-an-amqp-or-kinesis-reactor-rule">Ably
            knowledge base article</a> for details.
          example: "message name: #{message.name}, clientId: #{message.clientId}"
        authentication:
          discriminator:
            propertyName: authenticationMode
            mapping:
              credentials: '#/components/schemas/aws_access_keys_response'
              assumeRole: '#/components/schemas/aws_assume_role'
          oneOf:
          - $ref: '#/components/schemas/aws_access_keys_response'
          - $ref: '#/components/schemas/aws_assume_role'
        enveloped:
          type: boolean
          description: "Messages delivered through Reactor are wrapped in an Ably\
            \ envelope by default that contains metadata about the message and its\
            \ payload. The form of the envelope depends on whether it is part of a\
            \ Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks,\
            \ you can ensure you only get the raw payload by unchecking \"Enveloped\"\
            \ when setting up the rule."
          nullable: true
          example: true
        format:
          type: string
          description: JSON provides a text-based encoding.
          example: json
      additionalProperties: false
    aws_sqs_rule_post_target:
      required:
      - authentication
      - awsAccountId
      - queueName
      - region
      type: object
      properties:
        region:
          type: string
          description: The region is which AWS SQS is hosted. See the <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region">AWS
            documentation</a> for more detail.
          example: us-west-1
        awsAccountId:
          type: string
          description: Your AWS account ID.
          example: "123456789012"
        queueName:
          type: string
          description: The AWS SQS queue name.
          example: MyQueue
        authentication:
          discriminator:
            propertyName: authenticationMode
            mapping:
              credentials: '#/components/schemas/aws_access_keys'
              assumeRole: '#/components/schemas/aws_assume_role'
          oneOf:
          - $ref: '#/components/schemas/aws_access_keys'
          - $ref: '#/components/schemas/aws_assume_role'
        enveloped:
          type: boolean
          description: "Messages delivered through Reactor are wrapped in an Ably\
            \ envelope by default that contains metadata about the message and its\
            \ payload. The form of the envelope depends on whether it is part of a\
            \ Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks,\
            \ you can ensure you only get the raw payload by unchecking \"Enveloped\"\
            \ when setting up the rule."
          nullable: true
          example: true
        format:
          type: string
          description: JSON provides a text-based encoding.
          example: json
      additionalProperties: false
    aws_sqs_rule_patch_target:
      type: object
      properties:
        region:
          type: string
          description: The region is which AWS SQS is hosted. See the <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region">AWS
            documentation</a> for more detail.
          example: us-west-1
        awsAccountId:
          type: string
          description: Your AWS account ID.
          example: "123456789012"
        queueName:
          type: string
          description: The AWS SQS queue name.
          example: MyQueue
        authentication:
          discriminator:
            propertyName: authenticationMode
            mapping:
              credentials: '#/components/schemas/aws_access_keys'
              assumeRole: '#/components/schemas/aws_assume_role'
          oneOf:
          - $ref: '#/components/schemas/aws_access_keys'
          - $ref: '#/components/schemas/aws_assume_role'
        enveloped:
          type: boolean
          description: "Messages delivered through Reactor are wrapped in an Ably\
            \ envelope by default that contains metadata about the message and its\
            \ payload. The form of the envelope depends on whether it is part of a\
            \ Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks,\
            \ you can ensure you only get the raw payload by unchecking \"Enveloped\"\
            \ when setting up the rule."
          nullable: true
          example: true
        format:
          type: string
          description: JSON provides a text-based encoding.
          example: json
      additionalProperties: false
    aws_sqs_rule_response_target:
      required:
      - authentication
      - awsAccountId
      - queueName
      - region
      type: object
      properties:
        region:
          type: string
          description: The region is which AWS SQS is hosted. See the <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#lambda_region">AWS
            documentation</a> for more detail.
          example: us-west-1
        awsAccountId:
          type: string
          description: Your AWS account ID.
          example: "123456789012"
        queueName:
          type: string
          description: The AWS SQS queue name.
          example: MyQueue
        authentication:
          discriminator:
            propertyName: authenticationMode
            mapping:
              credentials: '#/components/schemas/aws_access_keys_response'
              assumeRole: '#/components/schemas/aws_assume_role'
          oneOf:
          - $ref: '#/components/schemas/aws_access_keys_response'
          - $ref: '#/components/schemas/aws_assume_role'
        enveloped:
          type: boolean
          description: "Messages delivered through Reactor are wrapped in an Ably\
            \ envelope by default that contains metadata about the message and its\
            \ payload. The form of the envelope depends on whether it is part of a\
            \ Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks,\
            \ you can ensure you only get the raw payload by unchecking \"Enveloped\"\
            \ when setting up the rule."
          nullable: true
          example: true
        format:
          type: string
          description: JSON provides a text-based encoding.
          example: json
      additionalProperties: false
    amqp_rule_post_target:
      required:
      - queueId
      type: object
      properties:
        queueId:
          type: string
        headers:
          type: array
          description: "If you have additional information to send, you'll need to\
            \ include the relevant headers."
          example:
          - name: User-Agent
            value: user-agent-string
          - name: headerName
            value: headerValue
          items:
            $ref: '#/components/schemas/http_rule_post_target_headers'
        enveloped:
          type: boolean
          description: "Messages delivered through Reactor are wrapped in an Ably\
            \ envelope by default that contains metadata about the message and its\
            \ payload. The form of the envelope depends on whether it is part of a\
            \ Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks,\
            \ you can ensure you only get the raw payload by unchecking \"Enveloped\"\
            \ when setting up the rule."
          nullable: true
          example: true
        format:
          type: string
          description: "JSON provides a simpler text based encoding, whereas MsgPack\
            \ provides a more efficient binary encoding."
          example: json
      additionalProperties: false
    amqp_rule_patch_target:
      type: object
      properties:
        queueId:
          type: string
        headers:
          type: array
          description: "If you have additional information to send, you'll need to\
            \ include the relevant headers."
          example:
          - name: User-Agent
            value: user-agent-string
          - name: headerName
            value: headerValue
          items:
            $ref: '#/components/schemas/http_rule_post_target_headers'
        enveloped:
          type: boolean
          description: "Messages delivered through Reactor are wrapped in an Ably\
            \ envelope by default that contains metadata about the message and its\
            \ payload. The form of the envelope depends on whether it is part of a\
            \ Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks,\
            \ you can ensure you only get the raw payload by unchecking \"Enveloped\"\
            \ when setting up the rule."
          nullable: true
          example: true
        format:
          type: string
          description: "JSON provides a simpler text based encoding, whereas MsgPack\
            \ provides a more efficient binary encoding."
          example: json
      additionalProperties: false
    amqp_external_rule_post_target:
      required:
      - mandatoryRoute
      - persistentMessages
      - routingKey
      - url
      type: object
      properties:
        url:
          type: string
          description: The webhook URL that Ably will POST events to.
          example: https://example.com/webhooks
        routingKey:
          type: string
          description: The AMQP routing key. The routing key is used by the AMQP exchange
            to route messages to a physical queue. See this <a href="https://knowledge.ably.com/what-is-the-format-of-the-routingkey-for-an-amqp-or-kinesis-reactor-rule">Ably
            knowledge base article</a> for details.
          example: "message name: #{message.name}, clientId: #{message.clientId}"
        mandatoryRoute:
          type: boolean
          description: "Reject delivery of the message if the route does not exist,\
            \ otherwise fail silently."
          example: true
        persistentMessages:
          type: boolean
          description: "Marks the message as persistent, instructing the broker to\
            \ write it to disk if it is in a durable queue."
          example: true
        messageTtl:
          type: integer
          description: "You can optionally override the default TTL on a queue and\
            \ specify a TTL in minutes for messages to be persisted. It is unusual\
            \ to change the default TTL, so if this field is left empty, the default\
            \ TTL for the queue will be used."
        headers:
          type: array
          description: "If you have additional information to send, you'll need to\
            \ include the relevant headers."
          example:
          - name: User-Agent
            value: user-agent-string
          - name: headerName
            value: headerValue
          items:
            $ref: '#/components/schemas/http_rule_post_target_headers'
        enveloped:
          type: boolean
          description: "Messages delivered through Reactor are wrapped in an Ably\
            \ envelope by default that contains metadata about the message and its\
            \ payload. The form of the envelope depends on whether it is part of a\
            \ Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks,\
            \ you can ensure you only get the raw payload by unchecking \"Enveloped\"\
            \ when setting up the rule."
          nullable: true
          example: true
        format:
          type: string
          description: "JSON provides a simpler text based encoding, whereas MsgPack\
            \ provides a more efficient binary encoding."
          example: json
      additionalProperties: false
    amqp_external_rule_patch_target:
      type: object
      properties:
        url:
          type: string
          description: The webhook URL that Ably will POST events to.
          example: https://example.com/webhooks
        routingKey:
          type: string
          description: The AMQP routing key. The routing key is used by the AMQP exchange
            to route messages to a physical queue. See this <a href="https://knowledge.ably.com/what-is-the-format-of-the-routingkey-for-an-amqp-or-kinesis-reactor-rule">Ably
            knowledge base article</a> for details.
          example: "message name: #{message.name}, clientId: #{message.clientId}"
        mandatoryRoute:
          type: boolean
          description: "Reject delivery of the message if the route does not exist,\
            \ otherwise fail silently."
          example: true
        persistentMessages:
          type: boolean
          description: "Marks the message as persistent, instructing the broker to\
            \ write it to disk if it is in a durable queue."
          example: true
        messageTtl:
          type: integer
          description: "You can optionally override the default TTL on a queue and\
            \ specify a TTL in minutes for messages to be persisted. It is unusual\
            \ to change the default TTL, so if this field is left empty, the default\
            \ TTL for the queue will be used."
        headers:
          type: array
          description: "If you have additional information to send, you'll need to\
            \ include the relevant headers."
          example:
          - name: User-Agent
            value: user-agent-string
          - name: headerName
            value: headerValue
          items:
            $ref: '#/components/schemas/http_rule_post_target_headers'
        enveloped:
          type: boolean
          description: "Messages delivered through Reactor are wrapped in an Ably\
            \ envelope by default that contains metadata about the message and its\
            \ payload. The form of the envelope depends on whether it is part of a\
            \ Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks,\
            \ you can ensure you only get the raw payload by unchecking \"Enveloped\"\
            \ when setting up the rule."
          nullable: true
          example: true
        format:
          type: string
          description: "JSON provides a simpler text based encoding, whereas MsgPack\
            \ provides a more efficient binary encoding."
          example: json
      additionalProperties: false
    amqp_external_rule_response_target:
      required:
      - mandatoryRoute
      - persistentMessages
      - routingKey
      - url
      type: object
      properties:
        url:
          type: string
          description: The webhook URL that Ably will POST events to.
          example: https://example.com/webhooks
        routingKey:
          type: string
          description: The AMQP routing key. The routing key is used by the AMQP exchange
            to route messages to a physical queue. See this <a href="https://knowledge.ably.com/what-is-the-format-of-the-routingkey-for-an-amqp-or-kinesis-reactor-rule">Ably
            knowledge base article</a> for details.
          example: "message name: #{message.name}, clientId: #{message.clientId}"
        mandatoryRoute:
          type: boolean
          description: "Reject delivery of the message if the route does not exist,\
            \ otherwise fail silently."
          example: true
        persistentMessages:
          type: boolean
          description: "Marks the message as persistent, instructing the broker to\
            \ write it to disk if it is in a durable queue."
          example: true
        messageTtl:
          type: integer
          description: "You can optionally override the default TTL on a queue and\
            \ specify a TTL in minutes for messages to be persisted. It is unusual\
            \ to change the default TTL, so if this field is left empty, the default\
            \ TTL for the queue will be used."
          example: 60
        headers:
          type: array
          description: "If you have additional information to send, you'll need to\
            \ include the relevant headers."
          example:
          - name: User-Agent
            value: user-agent-string
          - name: headerName
            value: headerValue
          items:
            $ref: '#/components/schemas/http_rule_post_target_headers'
        enveloped:
          type: boolean
          description: "Messages delivered through Reactor are wrapped in an Ably\
            \ envelope by default that contains metadata about the message and its\
            \ payload. The form of the envelope depends on whether it is part of a\
            \ Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks,\
            \ you can ensure you only get the raw payload by unchecking \"Enveloped\"\
            \ when setting up the rule."
          nullable: true
          example: true
        format:
          type: string
          description: "JSON provides a simpler text based encoding, whereas MsgPack\
            \ provides a more efficient binary encoding."
          example: json
      additionalProperties: false
    unsupported_rule_response_target:
      required:
      - url
      type: object
      properties:
        url:
          type: string
          description: The webhook URL that Ably will POST events to.
          example: https://example.com/webhooks
      additionalProperties: false
    queue_response_amqp:
      type: object
      properties:
        uri:
          type: string
          description: URI for the AMQP queue interface.
          example: amqps://us-east-1-a-queue.ably.io:5671/shared
        queueName:
          type: string
          description: Name of the Ably queue.
          example: 28AB6w:My queue
      additionalProperties: false
      example:
        queueName: 28AB6w:My queue
        uri: amqps://us-east-1-a-queue.ably.io:5671/shared
    queue_response_stomp:
      type: object
      properties:
        uri:
          type: string
          description: URI for the STOMP queue interface.
          example: stomp://us-east-1-a-queue.ably.io:61614
        host:
          type: string
          description: The host type for the queue.
          example: shared
        destination:
          type: string
          description: Destination queue.
          example: /amqp/queue/28AB6w:My queue
      additionalProperties: false
      example:
        host: shared
        destination: /amqp/queue/28AB6w:My queue
        uri: stomp://us-east-1-a-queue.ably.io:61614
    queue_response_messages:
      type: object
      properties:
        ready:
          type: integer
          description: The number of ready messages in the queue.
          nullable: true
          example: 0
        unacknowledged:
          type: integer
          description: The number of unacknowledged messages in the queue.
          nullable: true
          example: 0
        total:
          type: integer
          description: The total number of messages in the queue.
          nullable: true
          example: 0
      additionalProperties: false
      description: Details of messages in the queue.
      example:
        total: 0
        ready: 0
        unacknowledged: 0
    queue_response_stats:
      type: object
      properties:
        publishRate:
          type: number
          description: The rate at which messages are published to the queue. Rate
            is messages per minute.
          nullable: true
        deliveryRate:
          type: number
          description: The rate at which messages are delivered from the queue. Rate
            is messages per minute.
          nullable: true
        acknowledgementRate:
          type: number
          description: The rate at which messages are acknowledged. Rate is messages
            per minute.
          nullable: true
      additionalProperties: false
      example:
        deliveryRate: 6.027456183070403
        publishRate: 0.8008281904610115
        acknowledgementRate: 1.4658129805029452
    me_token:
      required:
      - capabilities
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          description: The token ID.
          example: 12345
        name:
          type: string
          description: The friendly name for the token.
          example: My Token
        capabilities:
          type: array
          description: An array containing the access capabilities associated with
            the access token.
          example:
          - write:namespace
          - read:namespace
          - write:queue
          - read:queue
          - write:rule
          - read:rule
          - write:key
          - read:key
          - write:app
          - read:app
          items:
            type: string
      additionalProperties: false
      example:
        capabilities:
        - write:namespace
        - read:namespace
        - write:queue
        - read:queue
        - write:rule
        - read:rule
        - write:key
        - read:key
        - write:app
        - read:app
        name: My Token
        id: 12345
    me_user:
      required:
      - email
      - id
      type: object
      properties:
        id:
          type: integer
          description: The user ID associated with the account.
          example: 12345
        email:
          type: string
          description: Email address of the user associated with the account.
          example: user@example.com
      additionalProperties: false
      example:
        id: 12345
        email: user@example.com
    me_account:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
          description: The account ID.
          example: VpWaOA
        name:
          type: string
          description: The name of the account.
          example: Free account
      additionalProperties: false
      example:
        name: Free account
        id: VpWaOA
  securitySchemes:
    bearer_auth:
      type: http
      description: Control API uses bearer authentication. You need to generate an
        access token for use with this API. More details can be found in the <a href="https://ably.com/documentation/control-api/#authentication">Ably
        documentation</a>.
      scheme: bearer
