=begin
#Control API v1

#Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">Control API documentation</a>.  Control API is currently in Beta. 

OpenAPI spec version: 1.0.18

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class NamespacesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Lists namespaces
    # List the <a href=\"https://ably.com/documentation/general/channel-rules-namespaces\">namespaces</a> for the specified application ID.
    # @param app_id The application ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<NamespaceResponse>]
    def apps_app_id_namespaces_get(app_id, opts = {})
      data, _status_code, _headers = apps_app_id_namespaces_get_with_http_info(app_id, opts)
      data
    end

    # Lists namespaces
    # List the &lt;a href&#x3D;\&quot;https://ably.com/documentation/general/channel-rules-namespaces\&quot;&gt;namespaces&lt;/a&gt; for the specified application ID.
    # @param app_id The application ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<NamespaceResponse>, Integer, Hash)>] Array<NamespaceResponse> data, response status code and response headers
    def apps_app_id_namespaces_get_with_http_info(app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NamespacesApi.apps_app_id_namespaces_get ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling NamespacesApi.apps_app_id_namespaces_get"
      end
      # resource path
      local_var_path = '/apps/{app_id}/namespaces'.sub('{' + 'app_id' + '}', app_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<NamespaceResponse>' 

      auth_names = opts[:auth_names] || ['bearer_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NamespacesApi#apps_app_id_namespaces_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a namespace
    # Deletes the <a href=\"https://ably.com/documentation/general/channel-rules-namespaces\">namespace</a> with the specified ID, for the specified application ID.
    # @param app_id The application ID.
    # @param namespace_id The namespace ID.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def apps_app_id_namespaces_namespace_id_delete(app_id, namespace_id, opts = {})
      apps_app_id_namespaces_namespace_id_delete_with_http_info(app_id, namespace_id, opts)
      nil
    end

    # Deletes a namespace
    # Deletes the &lt;a href&#x3D;\&quot;https://ably.com/documentation/general/channel-rules-namespaces\&quot;&gt;namespace&lt;/a&gt; with the specified ID, for the specified application ID.
    # @param app_id The application ID.
    # @param namespace_id The namespace ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def apps_app_id_namespaces_namespace_id_delete_with_http_info(app_id, namespace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NamespacesApi.apps_app_id_namespaces_namespace_id_delete ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling NamespacesApi.apps_app_id_namespaces_namespace_id_delete"
      end
      # verify the required parameter 'namespace_id' is set
      if @api_client.config.client_side_validation && namespace_id.nil?
        fail ArgumentError, "Missing the required parameter 'namespace_id' when calling NamespacesApi.apps_app_id_namespaces_namespace_id_delete"
      end
      # resource path
      local_var_path = '/apps/{app_id}/namespaces/{namespace_id}'.sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'namespace_id' + '}', namespace_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearer_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NamespacesApi#apps_app_id_namespaces_namespace_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates a namespace
    # Updates the <a href=\"https://ably.com/documentation/general/channel-rules-namespaces\">namespace</a> with the specified ID, for the application with the specified application ID.
    # @param app_id The application ID.
    # @param namespace_id The namespace ID.
    # @param [Hash] opts the optional parameters
    # @option opts [NamespacePatch] :body 
    # @return [NamespaceResponse]
    def apps_app_id_namespaces_namespace_id_patch(app_id, namespace_id, opts = {})
      data, _status_code, _headers = apps_app_id_namespaces_namespace_id_patch_with_http_info(app_id, namespace_id, opts)
      data
    end

    # Updates a namespace
    # Updates the &lt;a href&#x3D;\&quot;https://ably.com/documentation/general/channel-rules-namespaces\&quot;&gt;namespace&lt;/a&gt; with the specified ID, for the application with the specified application ID.
    # @param app_id The application ID.
    # @param namespace_id The namespace ID.
    # @param [Hash] opts the optional parameters
    # @option opts [NamespacePatch] :body 
    # @return [Array<(NamespaceResponse, Integer, Hash)>] NamespaceResponse data, response status code and response headers
    def apps_app_id_namespaces_namespace_id_patch_with_http_info(app_id, namespace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NamespacesApi.apps_app_id_namespaces_namespace_id_patch ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling NamespacesApi.apps_app_id_namespaces_namespace_id_patch"
      end
      # verify the required parameter 'namespace_id' is set
      if @api_client.config.client_side_validation && namespace_id.nil?
        fail ArgumentError, "Missing the required parameter 'namespace_id' when calling NamespacesApi.apps_app_id_namespaces_namespace_id_patch"
      end
      # resource path
      local_var_path = '/apps/{app_id}/namespaces/{namespace_id}'.sub('{' + 'app_id' + '}', app_id.to_s).sub('{' + 'namespace_id' + '}', namespace_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'NamespaceResponse' 

      auth_names = opts[:auth_names] || ['bearer_auth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NamespacesApi#apps_app_id_namespaces_namespace_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a namespace
    # Creates a <a href=\"https://ably.com/documentation/general/channel-rules-namespaces\">namespace</a> for the specified application ID.
    # @param app_id The application ID.
    # @param [Hash] opts the optional parameters
    # @option opts [NamespacePost] :body 
    # @return [NamespaceResponse]
    def apps_app_id_namespaces_post(app_id, opts = {})
      data, _status_code, _headers = apps_app_id_namespaces_post_with_http_info(app_id, opts)
      data
    end

    # Creates a namespace
    # Creates a &lt;a href&#x3D;\&quot;https://ably.com/documentation/general/channel-rules-namespaces\&quot;&gt;namespace&lt;/a&gt; for the specified application ID.
    # @param app_id The application ID.
    # @param [Hash] opts the optional parameters
    # @option opts [NamespacePost] :body 
    # @return [Array<(NamespaceResponse, Integer, Hash)>] NamespaceResponse data, response status code and response headers
    def apps_app_id_namespaces_post_with_http_info(app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NamespacesApi.apps_app_id_namespaces_post ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling NamespacesApi.apps_app_id_namespaces_post"
      end
      # resource path
      local_var_path = '/apps/{app_id}/namespaces'.sub('{' + 'app_id' + '}', app_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'NamespaceResponse' 

      auth_names = opts[:auth_names] || ['bearer_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NamespacesApi#apps_app_id_namespaces_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
