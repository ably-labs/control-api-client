=begin
#Control API v1

#Use the Control API to manage your applications, namespaces, keys, queues, rules, and more.  Detailed information on using this API can be found in the Ably <a href=\"https://ably.com/documentation/control-api\">Control API documentation</a>.  Control API is currently in Beta. 

OpenAPI spec version: 1.0.18

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class AppsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Lists account apps
    # List all Ably applications for the specified account ID.
    # @param account_id The account ID for which to retrieve the associated applications.
    # @param [Hash] opts the optional parameters
    # @return [Array<AppResponse>]
    def accounts_account_id_apps_get(account_id, opts = {})
      data, _status_code, _headers = accounts_account_id_apps_get_with_http_info(account_id, opts)
      data
    end

    # Lists account apps
    # List all Ably applications for the specified account ID.
    # @param account_id The account ID for which to retrieve the associated applications.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AppResponse>, Integer, Hash)>] Array<AppResponse> data, response status code and response headers
    def accounts_account_id_apps_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.accounts_account_id_apps_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AppsApi.accounts_account_id_apps_get"
      end
      # resource path
      local_var_path = '/accounts/{account_id}/apps'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<AppResponse>' 

      auth_names = opts[:auth_names] || ['bearer_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#accounts_account_id_apps_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates an app
    # Creates an application with the specified properties.
    # @param account_id The account ID of the account in which to create the application.
    # @param [Hash] opts the optional parameters
    # @option opts [AppPost] :body 
    # @return [AppResponse]
    def accounts_account_id_apps_post(account_id, opts = {})
      data, _status_code, _headers = accounts_account_id_apps_post_with_http_info(account_id, opts)
      data
    end

    # Creates an app
    # Creates an application with the specified properties.
    # @param account_id The account ID of the account in which to create the application.
    # @param [Hash] opts the optional parameters
    # @option opts [AppPost] :body 
    # @return [Array<(AppResponse, Integer, Hash)>] AppResponse data, response status code and response headers
    def accounts_account_id_apps_post_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.accounts_account_id_apps_post ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AppsApi.accounts_account_id_apps_post"
      end
      # resource path
      local_var_path = '/accounts/{account_id}/apps'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'AppResponse' 

      auth_names = opts[:auth_names] || ['bearer_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#accounts_account_id_apps_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes an app
    # Deletes the application with the specified application ID.
    # @param id The ID of the application to be deleted.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def apps_id_delete(id, opts = {})
      apps_id_delete_with_http_info(id, opts)
      nil
    end

    # Deletes an app
    # Deletes the application with the specified application ID.
    # @param id The ID of the application to be deleted.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def apps_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.apps_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AppsApi.apps_id_delete"
      end
      # resource path
      local_var_path = '/apps/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearer_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#apps_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates an app
    # Updates the application with the specified application ID.
    # @param id The ID of application to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [AppPatch] :body 
    # @return [AppResponse]
    def apps_id_patch(id, opts = {})
      data, _status_code, _headers = apps_id_patch_with_http_info(id, opts)
      data
    end

    # Updates an app
    # Updates the application with the specified application ID.
    # @param id The ID of application to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [AppPatch] :body 
    # @return [Array<(AppResponse, Integer, Hash)>] AppResponse data, response status code and response headers
    def apps_id_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.apps_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AppsApi.apps_id_patch"
      end
      # resource path
      local_var_path = '/apps/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'AppResponse' 

      auth_names = opts[:auth_names] || ['bearer_auth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#apps_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates app's APNs info from a `.p12` file
    # Updates the application's Apple Push Notification service (APNs) information.
    # @param id The application ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :p12_file 
    # @option opts [String] :p12_pass 
    # @return [AppResponse]
    def apps_id_pkcs12_post(id, opts = {})
      data, _status_code, _headers = apps_id_pkcs12_post_with_http_info(id, opts)
      data
    end

    # Updates app&#x27;s APNs info from a &#x60;.p12&#x60; file
    # Updates the application&#x27;s Apple Push Notification service (APNs) information.
    # @param id The application ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :p12_file 
    # @option opts [String] :p12_pass 
    # @return [Array<(AppResponse, Integer, Hash)>] AppResponse data, response status code and response headers
    def apps_id_pkcs12_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppsApi.apps_id_pkcs12_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AppsApi.apps_id_pkcs12_post"
      end
      # resource path
      local_var_path = '/apps/{id}/pkcs12'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['p12File'] = opts[:'p12_file'] if !opts[:'p12_file'].nil?
      form_params['p12Pass'] = opts[:'p12_pass'] if !opts[:'p12_pass'].nil?

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AppResponse' 

      auth_names = opts[:auth_names] || ['bearer_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppsApi#apps_id_pkcs12_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
